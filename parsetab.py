
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftELSEleftORleftANDleftLTleftGTleftGEleftNEleftEQleftLEleftSUMSUBleftMULDIVAND ASSIGN BOOLEAN COMMA DIV ELIF ELSE EQ ERROR FALSE FLOAT FLOATNUMBER FOR GE GT ID IF INTEGER INTEGERNUMBER LCB LE LRB LSB LT MAIN MOD MUL NE NOT OR PRINT RCB RETURN RRB RSB SEMICOLON SUB SUM TRUE VOID WHILEprogram : declist MAIN LRB RRB blockdeclist : decdeclist : declist decdeclist : dec : vardecdec : funcdectype : INTEGERtype : FLOATtype : BOOLEANiddec : IDiddec : ID LSB exp RSBiddec : ID ASSIGN expidlist : iddecidlist : idlist COMMA iddecvardec : type idlist SEMICOLONfuncdec : type ID LRB paramdecs RRB blockfuncdec : VOID ID LRB paramdecs RRB blockparamdecs : paramdecslistparamdecs : paramdecslist : paramdecparamdecslist : paramdecslist COMMA paramdecparamdec : type IDparamdec : type ID LSB RSBvarlist : vardecvarlist : varlist vardecvarlist : block : LCB varlist stmtlist RCBstmtlist : stmtstmtlist : stmtlist stmtstmtlist : lvalue : IDlvalue : ID LSB exp RSBstmt : RETURN exp SEMICOLONstmt : exp SEMICOLONstmt : blockstmt : WHILE LRB exp RRB stmtstmt : FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmtstmt : IF LRB exp RRB stmt elseifliststmt : IF LRB exp RRB stmt elseiflist ELSE stmtstmt : PRINT LRB ID RRB SEMICOLONelseiflist : ELIF LRB exp RRB stmtelseiflist : elseiflist ELIF LRB exp RRB stmtelseiflist : exp : lvalue ASSIGN expexp : exp operator expexp : exp relop expexp : constexp : lvalueexp : ID LRB explist RRBexp : LRB exp RRBexp : ID LRB RRBexp : SUB expexp : NOT expoperator : ORoperator : ANDoperator : SUMoperator : SUBoperator : MULoperator : DIVoperator : MODconst : INTEGERNUMBERconst : FLOATNUMBERconst : TRUEconst : FALSErelop : GTrelop : LTrelop : NErelop : EQrelop : LErelop : GEexplist : expexplist : explist COMMA exp'
    
_lr_action_items = {'MAIN':([0,2,3,4,5,12,18,76,86,101,],[-4,11,-2,-5,-6,-3,-15,-16,-17,-27,]),'VOID':([0,2,3,4,5,12,18,76,86,101,],[7,7,-2,-5,-6,-3,-15,-16,-17,-27,]),'INTEGER':([0,2,3,4,5,12,18,20,23,45,48,72,73,76,86,88,101,],[8,8,-2,-5,-6,-3,-15,8,8,8,8,8,-24,-16,-17,-25,-27,]),'FLOAT':([0,2,3,4,5,12,18,20,23,45,48,72,73,76,86,88,101,],[9,9,-2,-5,-6,-3,-15,9,9,9,9,9,-24,-16,-17,-25,-27,]),'BOOLEAN':([0,2,3,4,5,12,18,20,23,45,48,72,73,76,86,88,101,],[10,10,-2,-5,-6,-3,-15,10,10,10,10,10,-24,-16,-17,-25,-27,]),'$end':([1,44,101,],[0,-1,-27,]),'ID':([6,7,8,9,10,18,19,21,22,27,35,36,37,45,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,72,73,74,87,88,89,90,92,99,101,102,104,105,106,107,108,110,115,116,117,119,121,122,123,124,127,129,130,131,132,134,136,137,138,139,],[14,16,-7,-8,-9,-15,26,31,31,46,31,31,31,-26,31,31,31,31,-54,-55,-56,-57,-58,-59,-60,-65,-66,-67,-68,-69,-70,31,31,-24,26,31,-25,-28,31,-35,31,-27,-29,-34,31,31,31,114,-33,31,31,31,-36,-43,-40,31,-38,31,31,31,-39,31,-37,31,31,-41,-42,]),'LRB':([11,14,16,18,21,22,31,35,36,37,45,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,72,73,87,88,89,90,92,93,94,95,96,99,101,102,104,105,106,107,110,115,116,117,119,121,122,123,124,125,127,128,129,130,131,132,134,136,137,138,139,],[17,20,23,-15,35,35,49,35,35,35,-26,35,35,35,35,-54,-55,-56,-57,-58,-59,-60,-65,-66,-67,-68,-69,-70,35,35,-24,35,-25,-28,35,-35,105,106,107,108,35,-27,-29,-34,35,35,35,-33,35,35,35,-36,-43,-40,35,-38,129,35,132,35,35,-39,35,-37,35,35,-41,-42,]),'SEMICOLON':([13,14,15,25,26,31,33,34,38,39,40,41,42,51,69,70,79,82,83,84,85,91,98,100,103,112,118,120,],[18,-10,-13,-14,-10,-31,-48,-47,-61,-62,-63,-64,-12,-11,-52,-53,-51,-45,-46,-44,-50,104,-49,-32,110,116,122,123,]),'COMMA':([13,14,15,25,26,29,30,31,33,34,38,39,40,41,42,46,51,69,70,77,78,79,80,82,83,84,85,97,98,100,109,],[19,-10,-13,-14,-10,48,-20,-31,-48,-47,-61,-62,-63,-64,-12,-22,-11,-52,-53,-21,99,-51,-71,-45,-46,-44,-50,-23,-49,-32,-72,]),'LSB':([14,26,31,46,],[21,21,50,75,]),'ASSIGN':([14,26,31,33,100,],[22,22,-31,67,-32,]),'RRB':([17,20,23,28,29,30,31,33,34,38,39,40,41,43,46,49,68,69,70,77,78,79,80,82,83,84,85,97,98,100,109,111,113,114,126,133,135,],[24,-19,-19,47,-18,-20,-31,-48,-47,-61,-62,-63,-64,71,-22,79,85,-52,-53,-21,98,-51,-71,-45,-46,-44,-50,-23,-49,-32,-72,115,117,118,130,136,137,]),'RETURN':([18,45,72,73,87,88,89,92,101,102,104,110,115,117,119,121,122,124,127,130,131,134,136,137,138,139,],[-15,-26,90,-24,90,-25,-28,-35,-27,-29,-34,-33,90,90,-36,-43,-40,-38,90,90,-39,-37,90,90,-41,-42,]),'WHILE':([18,45,72,73,87,88,89,92,101,102,104,110,115,117,119,121,122,124,127,130,131,134,136,137,138,139,],[-15,-26,93,-24,93,-25,-28,-35,-27,-29,-34,-33,93,93,-36,-43,-40,-38,93,93,-39,-37,93,93,-41,-42,]),'FOR':([18,45,72,73,87,88,89,92,101,102,104,110,115,117,119,121,122,124,127,130,131,134,136,137,138,139,],[-15,-26,94,-24,94,-25,-28,-35,-27,-29,-34,-33,94,94,-36,-43,-40,-38,94,94,-39,-37,94,94,-41,-42,]),'IF':([18,45,72,73,87,88,89,92,101,102,104,110,115,117,119,121,122,124,127,130,131,134,136,137,138,139,],[-15,-26,95,-24,95,-25,-28,-35,-27,-29,-34,-33,95,95,-36,-43,-40,-38,95,95,-39,-37,95,95,-41,-42,]),'PRINT':([18,45,72,73,87,88,89,92,101,102,104,110,115,117,119,121,122,124,127,130,131,134,136,137,138,139,],[-15,-26,96,-24,96,-25,-28,-35,-27,-29,-34,-33,96,96,-36,-43,-40,-38,96,96,-39,-37,96,96,-41,-42,]),'SUB':([18,21,22,31,32,33,34,35,36,37,38,39,40,41,42,45,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,79,80,81,82,83,84,85,87,88,89,90,91,92,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,115,116,117,119,120,121,122,123,124,126,127,129,130,131,132,133,134,135,136,137,138,139,],[-15,36,36,-31,57,-48,-47,36,36,36,-61,-62,-63,-64,57,-26,36,36,36,36,-54,-55,-56,-57,-58,-59,-60,-65,-66,-67,-68,-69,-70,36,57,-52,57,36,-24,-51,57,57,57,57,57,-50,36,-25,-28,36,57,-35,-49,36,-32,-27,-29,57,-34,36,36,36,57,-33,57,57,57,36,36,36,-36,57,-43,-40,36,-38,57,36,36,36,-39,36,57,-37,57,36,36,-41,-42,]),'NOT':([18,21,22,35,36,37,45,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,72,73,87,88,89,90,92,99,101,102,104,105,106,107,110,115,116,117,119,121,122,123,124,127,129,130,131,132,134,136,137,138,139,],[-15,37,37,37,37,37,-26,37,37,37,37,-54,-55,-56,-57,-58,-59,-60,-65,-66,-67,-68,-69,-70,37,37,-24,37,-25,-28,37,-35,37,-27,-29,-34,37,37,37,-33,37,37,37,-36,-43,-40,37,-38,37,37,37,-39,37,-37,37,37,-41,-42,]),'LCB':([18,24,45,47,71,72,73,87,88,89,92,101,102,104,110,115,117,119,121,122,124,127,130,131,134,136,137,138,139,],[-15,45,-26,45,45,45,-24,45,-25,-28,-35,-27,-29,-34,-33,45,45,-36,-43,-40,-38,45,45,-39,-37,45,45,-41,-42,]),'INTEGERNUMBER':([18,21,22,35,36,37,45,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,72,73,87,88,89,90,92,99,101,102,104,105,106,107,110,115,116,117,119,121,122,123,124,127,129,130,131,132,134,136,137,138,139,],[-15,38,38,38,38,38,-26,38,38,38,38,-54,-55,-56,-57,-58,-59,-60,-65,-66,-67,-68,-69,-70,38,38,-24,38,-25,-28,38,-35,38,-27,-29,-34,38,38,38,-33,38,38,38,-36,-43,-40,38,-38,38,38,38,-39,38,-37,38,38,-41,-42,]),'FLOATNUMBER':([18,21,22,35,36,37,45,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,72,73,87,88,89,90,92,99,101,102,104,105,106,107,110,115,116,117,119,121,122,123,124,127,129,130,131,132,134,136,137,138,139,],[-15,39,39,39,39,39,-26,39,39,39,39,-54,-55,-56,-57,-58,-59,-60,-65,-66,-67,-68,-69,-70,39,39,-24,39,-25,-28,39,-35,39,-27,-29,-34,39,39,39,-33,39,39,39,-36,-43,-40,39,-38,39,39,39,-39,39,-37,39,39,-41,-42,]),'TRUE':([18,21,22,35,36,37,45,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,72,73,87,88,89,90,92,99,101,102,104,105,106,107,110,115,116,117,119,121,122,123,124,127,129,130,131,132,134,136,137,138,139,],[-15,40,40,40,40,40,-26,40,40,40,40,-54,-55,-56,-57,-58,-59,-60,-65,-66,-67,-68,-69,-70,40,40,-24,40,-25,-28,40,-35,40,-27,-29,-34,40,40,40,-33,40,40,40,-36,-43,-40,40,-38,40,40,40,-39,40,-37,40,40,-41,-42,]),'FALSE':([18,21,22,35,36,37,45,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,72,73,87,88,89,90,92,99,101,102,104,105,106,107,110,115,116,117,119,121,122,123,124,127,129,130,131,132,134,136,137,138,139,],[-15,41,41,41,41,41,-26,41,41,41,41,-54,-55,-56,-57,-58,-59,-60,-65,-66,-67,-68,-69,-70,41,41,-24,41,-25,-28,41,-35,41,-27,-29,-34,41,41,41,-33,41,41,41,-36,-43,-40,41,-38,41,41,41,-39,41,-37,41,41,-41,-42,]),'RCB':([18,45,72,73,87,88,89,92,101,102,104,110,119,121,122,124,131,134,138,139,],[-15,-26,-30,-24,101,-25,-28,-35,-27,-29,-34,-33,-36,-43,-40,-38,-39,-37,-41,-42,]),'RSB':([31,32,33,34,38,39,40,41,69,70,75,79,81,82,83,84,85,98,100,],[-31,51,-48,-47,-61,-62,-63,-64,-52,-53,97,-51,100,-45,-46,-44,-50,-49,-32,]),'OR':([31,32,33,34,38,39,40,41,42,68,69,70,79,80,81,82,83,84,85,91,98,100,103,109,111,112,113,120,126,133,135,],[-31,54,-48,-47,-61,-62,-63,-64,54,54,-52,54,-51,54,54,54,54,54,-50,54,-49,-32,54,54,54,54,54,54,54,54,54,]),'AND':([31,32,33,34,38,39,40,41,42,68,69,70,79,80,81,82,83,84,85,91,98,100,103,109,111,112,113,120,126,133,135,],[-31,55,-48,-47,-61,-62,-63,-64,55,55,-52,55,-51,55,55,55,55,55,-50,55,-49,-32,55,55,55,55,55,55,55,55,55,]),'SUM':([31,32,33,34,38,39,40,41,42,68,69,70,79,80,81,82,83,84,85,91,98,100,103,109,111,112,113,120,126,133,135,],[-31,56,-48,-47,-61,-62,-63,-64,56,56,-52,56,-51,56,56,56,56,56,-50,56,-49,-32,56,56,56,56,56,56,56,56,56,]),'MUL':([31,32,33,34,38,39,40,41,42,68,69,70,79,80,81,82,83,84,85,91,98,100,103,109,111,112,113,120,126,133,135,],[-31,58,-48,-47,-61,-62,-63,-64,58,58,58,58,-51,58,58,58,58,58,-50,58,-49,-32,58,58,58,58,58,58,58,58,58,]),'DIV':([31,32,33,34,38,39,40,41,42,68,69,70,79,80,81,82,83,84,85,91,98,100,103,109,111,112,113,120,126,133,135,],[-31,59,-48,-47,-61,-62,-63,-64,59,59,59,59,-51,59,59,59,59,59,-50,59,-49,-32,59,59,59,59,59,59,59,59,59,]),'MOD':([31,32,33,34,38,39,40,41,42,68,69,70,79,80,81,82,83,84,85,91,98,100,103,109,111,112,113,120,126,133,135,],[-31,60,-48,-47,-61,-62,-63,-64,60,60,-52,60,-51,60,60,60,60,60,-50,60,-49,-32,60,60,60,60,60,60,60,60,60,]),'GT':([31,32,33,34,38,39,40,41,42,68,69,70,79,80,81,82,83,84,85,91,98,100,103,109,111,112,113,120,126,133,135,],[-31,61,-48,-47,-61,-62,-63,-64,61,61,-52,61,-51,61,61,61,61,61,-50,61,-49,-32,61,61,61,61,61,61,61,61,61,]),'LT':([31,32,33,34,38,39,40,41,42,68,69,70,79,80,81,82,83,84,85,91,98,100,103,109,111,112,113,120,126,133,135,],[-31,62,-48,-47,-61,-62,-63,-64,62,62,-52,62,-51,62,62,62,62,62,-50,62,-49,-32,62,62,62,62,62,62,62,62,62,]),'NE':([31,32,33,34,38,39,40,41,42,68,69,70,79,80,81,82,83,84,85,91,98,100,103,109,111,112,113,120,126,133,135,],[-31,63,-48,-47,-61,-62,-63,-64,63,63,-52,63,-51,63,63,63,63,63,-50,63,-49,-32,63,63,63,63,63,63,63,63,63,]),'EQ':([31,32,33,34,38,39,40,41,42,68,69,70,79,80,81,82,83,84,85,91,98,100,103,109,111,112,113,120,126,133,135,],[-31,64,-48,-47,-61,-62,-63,-64,64,64,-52,64,-51,64,64,64,64,64,-50,64,-49,-32,64,64,64,64,64,64,64,64,64,]),'LE':([31,32,33,34,38,39,40,41,42,68,69,70,79,80,81,82,83,84,85,91,98,100,103,109,111,112,113,120,126,133,135,],[-31,65,-48,-47,-61,-62,-63,-64,65,65,-52,65,-51,65,65,65,65,65,-50,65,-49,-32,65,65,65,65,65,65,65,65,65,]),'GE':([31,32,33,34,38,39,40,41,42,68,69,70,79,80,81,82,83,84,85,91,98,100,103,109,111,112,113,120,126,133,135,],[-31,66,-48,-47,-61,-62,-63,-64,66,66,-52,66,-51,66,66,66,66,66,-50,66,-49,-32,66,66,66,66,66,66,66,66,66,]),'ELIF':([92,101,104,110,119,121,122,124,131,134,138,139,],[-35,-27,-34,-33,-36,125,-40,128,-39,-37,-41,-42,]),'ELSE':([92,101,104,110,119,121,122,124,131,134,138,139,],[-35,-27,-34,-33,-36,-43,-40,127,-39,-37,-41,-42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declist':([0,],[2,]),'dec':([0,2,],[3,12,]),'vardec':([0,2,45,72,],[4,4,73,88,]),'funcdec':([0,2,],[5,5,]),'type':([0,2,20,23,45,48,72,],[6,6,27,27,74,27,74,]),'idlist':([6,74,],[13,13,]),'iddec':([6,19,74,],[15,25,15,]),'paramdecs':([20,23,],[28,43,]),'paramdecslist':([20,23,],[29,29,]),'paramdec':([20,23,48,],[30,30,77,]),'exp':([21,22,35,36,37,49,50,52,53,67,72,87,90,99,105,106,107,115,116,117,123,127,129,130,132,136,137,],[32,42,68,69,70,80,81,82,83,84,91,91,103,109,111,112,113,91,120,91,126,91,133,91,135,91,91,]),'lvalue':([21,22,35,36,37,49,50,52,53,67,72,87,90,99,105,106,107,115,116,117,123,127,129,130,132,136,137,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'const':([21,22,35,36,37,49,50,52,53,67,72,87,90,99,105,106,107,115,116,117,123,127,129,130,132,136,137,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'block':([24,47,71,72,87,115,117,127,130,136,137,],[44,76,86,92,92,92,92,92,92,92,92,]),'operator':([32,42,68,69,70,80,81,82,83,84,91,103,109,111,112,113,120,126,133,135,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'relop':([32,42,68,69,70,80,81,82,83,84,91,103,109,111,112,113,120,126,133,135,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'varlist':([45,],[72,]),'explist':([49,],[78,]),'stmtlist':([72,],[87,]),'stmt':([72,87,115,117,127,130,136,137,],[89,102,119,121,131,134,138,139,]),'elseiflist':([121,],[124,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declist MAIN LRB RRB block','program',5,'p_program','parser.py',12),
  ('declist -> dec','declist',1,'p_declist_dec','parser.py',16),
  ('declist -> declist dec','declist',2,'p_declist_declist','parser.py',20),
  ('declist -> <empty>','declist',0,'p_declist_lambda','parser.py',24),
  ('dec -> vardec','dec',1,'p_dec_vardec','parser.py',28),
  ('dec -> funcdec','dec',1,'p_dec_funcdec','parser.py',32),
  ('type -> INTEGER','type',1,'p_type_int','parser.py',36),
  ('type -> FLOAT','type',1,'p_type_float','parser.py',40),
  ('type -> BOOLEAN','type',1,'p_type_bool','parser.py',44),
  ('iddec -> ID','iddec',1,'p_iddec_id','parser.py',48),
  ('iddec -> ID LSB exp RSB','iddec',4,'p_iddec_id_s_exp','parser.py',52),
  ('iddec -> ID ASSIGN exp','iddec',3,'p_iddec_id_assign_exp','parser.py',56),
  ('idlist -> iddec','idlist',1,'p_idlist_iddec','parser.py',60),
  ('idlist -> idlist COMMA iddec','idlist',3,'p_idlist_idlist','parser.py',64),
  ('vardec -> type idlist SEMICOLON','vardec',3,'p_vardec','parser.py',68),
  ('funcdec -> type ID LRB paramdecs RRB block','funcdec',6,'p_funcdec_type','parser.py',72),
  ('funcdec -> VOID ID LRB paramdecs RRB block','funcdec',6,'p_funcdec_void','parser.py',76),
  ('paramdecs -> paramdecslist','paramdecs',1,'p_paramdecs_list','parser.py',80),
  ('paramdecs -> <empty>','paramdecs',0,'p_paramdecs_lambda','parser.py',84),
  ('paramdecslist -> paramdec','paramdecslist',1,'p_paramdecslist_paramdec','parser.py',88),
  ('paramdecslist -> paramdecslist COMMA paramdec','paramdecslist',3,'p_paramdecslist_paramdecslist','parser.py',92),
  ('paramdec -> type ID','paramdec',2,'p_paramdec','parser.py',96),
  ('paramdec -> type ID LSB RSB','paramdec',4,'p_paramdec_s','parser.py',100),
  ('varlist -> vardec','varlist',1,'p_varlist_vardec','parser.py',104),
  ('varlist -> varlist vardec','varlist',2,'p_varlist_varlist','parser.py',108),
  ('varlist -> <empty>','varlist',0,'p_varlist_lambda','parser.py',112),
  ('block -> LCB varlist stmtlist RCB','block',4,'p_block','parser.py',116),
  ('stmtlist -> stmt','stmtlist',1,'p_stmtlist_stmt','parser.py',120),
  ('stmtlist -> stmtlist stmt','stmtlist',2,'p_stmtlist_stmtlist','parser.py',124),
  ('stmtlist -> <empty>','stmtlist',0,'p_stmtlist_lambda','parser.py',128),
  ('lvalue -> ID','lvalue',1,'p_lvalue_id','parser.py',132),
  ('lvalue -> ID LSB exp RSB','lvalue',4,'p_lvalue_exp','parser.py',136),
  ('stmt -> RETURN exp SEMICOLON','stmt',3,'p_stmt_return','parser.py',140),
  ('stmt -> exp SEMICOLON','stmt',2,'p_stmt_exp','parser.py',144),
  ('stmt -> block','stmt',1,'p_stmt_block','parser.py',148),
  ('stmt -> WHILE LRB exp RRB stmt','stmt',5,'p_stmt_while','parser.py',152),
  ('stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt','stmt',9,'p_stmt_for','parser.py',156),
  ('stmt -> IF LRB exp RRB stmt elseiflist','stmt',6,'p_stmt_if','parser.py',160),
  ('stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt','stmt',8,'p_stmt_if_long','parser.py',164),
  ('stmt -> PRINT LRB ID RRB SEMICOLON','stmt',5,'p_stmt_print','parser.py',168),
  ('elseiflist -> ELIF LRB exp RRB stmt','elseiflist',5,'p_elseiflist_elif','parser.py',172),
  ('elseiflist -> elseiflist ELIF LRB exp RRB stmt','elseiflist',6,'p_elseiflist_elseiflist','parser.py',176),
  ('elseiflist -> <empty>','elseiflist',0,'p_elseiflist_lambda','parser.py',180),
  ('exp -> lvalue ASSIGN exp','exp',3,'p_exp_lvalue_exp','parser.py',184),
  ('exp -> exp operator exp','exp',3,'p_exp_operator','parser.py',188),
  ('exp -> exp relop exp','exp',3,'p_exp_relop','parser.py',192),
  ('exp -> const','exp',1,'p_exp_const','parser.py',196),
  ('exp -> lvalue','exp',1,'p_exp_lvalue','parser.py',200),
  ('exp -> ID LRB explist RRB','exp',4,'p_exp_id_explist','parser.py',204),
  ('exp -> LRB exp RRB','exp',3,'p_exp_r_exp','parser.py',208),
  ('exp -> ID LRB RRB','exp',3,'p_exp_id','parser.py',212),
  ('exp -> SUB exp','exp',2,'p_exp_sub_exp','parser.py',216),
  ('exp -> NOT exp','exp',2,'p_exp_not_exp','parser.py',220),
  ('operator -> OR','operator',1,'p_operator_or','parser.py',224),
  ('operator -> AND','operator',1,'p_operator_and','parser.py',228),
  ('operator -> SUM','operator',1,'p_operator_sum','parser.py',232),
  ('operator -> SUB','operator',1,'p_operator_sub','parser.py',236),
  ('operator -> MUL','operator',1,'p_operator_mul','parser.py',240),
  ('operator -> DIV','operator',1,'p_operator_div','parser.py',244),
  ('operator -> MOD','operator',1,'p_operator_mod','parser.py',248),
  ('const -> INTEGERNUMBER','const',1,'p_const_int','parser.py',252),
  ('const -> FLOATNUMBER','const',1,'p_const_float','parser.py',256),
  ('const -> TRUE','const',1,'p_const_true','parser.py',260),
  ('const -> FALSE','const',1,'p_const_false','parser.py',264),
  ('relop -> GT','relop',1,'p_relop_gt','parser.py',268),
  ('relop -> LT','relop',1,'p_relop_lt','parser.py',272),
  ('relop -> NE','relop',1,'p_relop_ne','parser.py',276),
  ('relop -> EQ','relop',1,'p_relop_eq','parser.py',280),
  ('relop -> LE','relop',1,'p_relop_le','parser.py',284),
  ('relop -> GE','relop',1,'p_relop_ge','parser.py',288),
  ('explist -> exp','explist',1,'p_explist_exp','parser.py',292),
  ('explist -> explist COMMA exp','explist',3,'p_explist_explist','parser.py',296),
]
