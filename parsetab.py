
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMMArightASSIGNrightNOTleftORleftANDleftLTleftGTleftGEleftNEleftEQleftLEleftp1leftp2leftELSEleftELIFleftSUMSUBleftMULDIVMODAND ASSIGN BOOLEAN COMMA DIV ELIF ELSE EQ ERROR FALSE FLOAT FLOATNUMBER FOR GE GT ID IF INTEGER INTEGERNUMBER LCB LE LRB LSB LT MAIN MOD MUL NE NOT OR PRINT RCB RETURN RRB RSB SEMICOLON SUB SUM TRUE VOID WHILEprogram : declist MAIN LRB RRB blockprogram : MAIN LRB RRB blockdeclist : decdeclist : declist decdec : vardecdec : funcdectype : INTEGERtype : FLOATtype : BOOLEANiddec : IDiddec : ID LSB exp RSBiddec : ID ASSIGN expidlist : iddecidlist : idlist COMMA iddecvardec : type idlist SEMICOLONfuncdec : type ID LRB paramdecs RRB blockfuncdec : type ID LRB RRB blockfuncdec : VOID ID LRB paramdecs RRB blockfuncdec : VOID ID LRB RRB blockparamdecs : paramdecslistparamdecslist : paramdecparamdecslist : paramdecslist COMMA paramdecparamdec : type IDparamdec : type ID LSB RSBvarlist : vardecvarlist : varlist vardecblock : LCB varlist stmtlist RCBblock : LCB varlist RCBblock : LCB stmtlist RCBblock : LCB RCBstmtlist : stmtstmtlist : stmtlist stmtlvalue : IDlvalue : ID LSB exp RSBstmt : RETURN exp SEMICOLONstmt : exp SEMICOLONstmt : blockstmt : WHILE LRB exp RRB stmtstmt : FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmtstmt : IF LRB exp RRB stmt elseiflist %prec p2stmt : IF LRB exp RRB stmt %prec p1stmt : IF LRB exp RRB stmt elseiflist ELSE stmtstmt : IF LRB exp RRB stmt ELSE stmtstmt : PRINT LRB ID RRB SEMICOLONelseiflist : ELIF LRB exp RRB stmtelseiflist : elseiflist ELIF LRB exp RRB stmtexp : lvalue ASSIGN expexp : exp SUM expexp : exp SUB expexp : exp MUL expexp : exp DIV expexp : exp MOD expexp : exp OR expexp : exp AND expexp : constexp : lvalueexp : ID LRB explist RRBexp : LRB exp RRBexp : ID LRB RRBexp : SUB expexp : NOT expconst : INTEGERNUMBERconst : FLOATNUMBERconst : TRUEconst : FALSEexp : exp GT expexp : exp LT expexp : exp NE expexp : exp EQ expexp : exp LE expexp : exp GE expexplist : expexplist : explist COMMA exp'
    
_lr_action_items = {'MAIN':([0,2,4,5,6,13,21,54,67,90,92,94,103,124,125,],[3,12,-3,-5,-6,-4,-15,-30,-17,-19,-28,-29,-16,-18,-27,]),'VOID':([0,2,4,5,6,13,21,54,67,90,92,94,103,124,125,],[8,8,-3,-5,-6,-4,-15,-30,-17,-19,-28,-29,-16,-18,-27,]),'INTEGER':([0,2,4,5,6,13,21,23,26,29,52,54,55,67,68,90,92,93,94,103,124,125,],[9,9,-3,-5,-6,-4,-15,9,9,9,9,-30,-25,-17,9,-19,-28,-26,-29,-16,-18,-27,]),'FLOAT':([0,2,4,5,6,13,21,23,26,29,52,54,55,67,68,90,92,93,94,103,124,125,],[10,10,-3,-5,-6,-4,-15,10,10,10,10,-30,-25,-17,10,-19,-28,-26,-29,-16,-18,-27,]),'BOOLEAN':([0,2,4,5,6,13,21,23,26,29,52,54,55,67,68,90,92,93,94,103,124,125,],[11,11,-3,-5,-6,-4,-15,11,11,11,11,-30,-25,-17,11,-19,-28,-26,-29,-16,-18,-27,]),'$end':([1,28,51,54,92,94,125,],[0,-2,-1,-30,-28,-29,-27,]),'LRB':([3,12,16,18,21,24,25,29,37,40,42,43,52,53,54,55,56,58,60,61,62,63,64,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,92,93,94,95,97,98,99,100,125,126,133,135,136,137,140,142,143,144,145,146,147,149,150,151,152,153,154,155,157,159,160,161,162,],[14,19,23,26,-15,42,42,42,69,42,42,42,42,42,-30,-25,-31,42,-37,98,99,100,101,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-28,-26,-29,-32,-36,42,42,42,-27,-35,42,42,42,42,-38,-41,-44,42,-40,42,152,42,155,-43,42,42,-42,42,-39,42,42,-45,-46,]),'ID':([7,8,9,10,11,21,22,24,25,29,32,40,42,43,52,53,54,55,56,57,58,60,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,92,93,94,95,97,98,99,100,101,125,126,133,135,136,137,140,142,143,144,145,146,149,151,152,153,154,155,157,159,160,161,162,],[16,18,-7,-8,-9,-15,31,37,37,37,65,37,37,37,37,37,-30,-25,-31,31,37,-37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-28,-26,-29,-32,-36,37,37,37,130,-27,-35,37,37,37,37,-38,-41,-44,37,-40,37,37,-43,37,37,-42,37,-39,37,37,-45,-46,]),'RRB':([14,19,23,26,33,35,36,37,39,41,44,45,46,47,49,65,69,86,87,88,104,105,106,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,129,130,131,132,134,139,148,156,158,],[20,27,34,50,66,-20,-21,-33,-56,-55,-62,-63,-64,-65,89,-23,106,-60,123,-61,-22,132,-59,-72,-48,-49,-50,-51,-52,-53,-54,-66,-67,-68,-69,-70,-71,-47,-58,135,137,138,-24,-57,-34,-73,153,159,160,]),'SEMICOLON':([15,16,17,30,31,37,39,41,44,45,46,47,48,59,71,86,88,96,106,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,132,134,138,141,],[21,-10,-13,-14,-10,-33,-56,-55,-62,-63,-64,-65,-12,97,-11,-60,-61,126,-59,-48,-49,-50,-51,-52,-53,-54,-66,-67,-68,-69,-70,-71,-47,-58,136,-57,-34,143,144,]),'COMMA':([15,16,17,30,31,35,36,37,39,41,44,45,46,47,48,65,71,86,88,104,105,106,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,131,132,134,139,],[22,-10,-13,-14,-10,68,-21,-33,-56,-55,-62,-63,-64,-65,-12,-23,-11,-60,-61,-22,133,-59,-72,-48,-49,-50,-51,-52,-53,-54,-66,-67,-68,-69,-70,-71,-47,-58,-24,-57,-34,-73,]),'LSB':([16,31,37,65,],[24,24,70,102,]),'ASSIGN':([16,31,37,39,134,],[25,25,-33,85,-34,]),'LCB':([20,21,27,29,34,50,52,53,54,55,56,60,66,89,91,92,93,94,95,97,125,126,135,137,140,142,143,145,146,149,151,153,154,157,159,160,161,162,],[29,-15,29,29,29,29,29,29,-30,-25,-31,-37,29,29,29,-28,-26,-29,-32,-36,-27,-35,29,29,-38,-41,-44,-40,29,29,-43,29,-42,-39,29,29,-45,-46,]),'RCB':([21,29,52,53,54,55,56,60,91,92,93,94,95,97,125,126,140,142,143,145,151,154,157,161,162,],[-15,54,92,94,-30,-25,-31,-37,125,-28,-26,-29,-32,-36,-27,-35,-38,-41,-44,-40,-43,-42,-39,-45,-46,]),'RETURN':([21,29,52,53,54,55,56,60,91,92,93,94,95,97,125,126,135,137,140,142,143,145,146,149,151,153,154,157,159,160,161,162,],[-15,58,58,58,-30,-25,-31,-37,58,-28,-26,-29,-32,-36,-27,-35,58,58,-38,-41,-44,-40,58,58,-43,58,-42,-39,58,58,-45,-46,]),'WHILE':([21,29,52,53,54,55,56,60,91,92,93,94,95,97,125,126,135,137,140,142,143,145,146,149,151,153,154,157,159,160,161,162,],[-15,61,61,61,-30,-25,-31,-37,61,-28,-26,-29,-32,-36,-27,-35,61,61,-38,-41,-44,-40,61,61,-43,61,-42,-39,61,61,-45,-46,]),'FOR':([21,29,52,53,54,55,56,60,91,92,93,94,95,97,125,126,135,137,140,142,143,145,146,149,151,153,154,157,159,160,161,162,],[-15,62,62,62,-30,-25,-31,-37,62,-28,-26,-29,-32,-36,-27,-35,62,62,-38,-41,-44,-40,62,62,-43,62,-42,-39,62,62,-45,-46,]),'IF':([21,29,52,53,54,55,56,60,91,92,93,94,95,97,125,126,135,137,140,142,143,145,146,149,151,153,154,157,159,160,161,162,],[-15,63,63,63,-30,-25,-31,-37,63,-28,-26,-29,-32,-36,-27,-35,63,63,-38,-41,-44,-40,63,63,-43,63,-42,-39,63,63,-45,-46,]),'PRINT':([21,29,52,53,54,55,56,60,91,92,93,94,95,97,125,126,135,137,140,142,143,145,146,149,151,153,154,157,159,160,161,162,],[-15,64,64,64,-30,-25,-31,-37,64,-28,-26,-29,-32,-36,-27,-35,64,64,-38,-41,-44,-40,64,64,-43,64,-42,-39,64,64,-45,-46,]),'SUB':([21,24,25,29,37,38,39,40,41,42,43,44,45,46,47,48,52,53,54,55,56,58,59,60,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,91,92,93,94,95,96,97,98,99,100,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127,128,129,132,133,134,135,136,137,139,140,141,142,143,144,145,146,148,149,151,152,153,154,155,156,157,158,159,160,161,162,],[-15,40,40,40,-33,73,-56,40,-55,40,40,-62,-63,-64,-65,73,40,40,-30,-25,-31,40,73,-37,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-60,73,73,40,-28,-26,-29,-32,73,-36,40,40,40,-59,73,73,-48,-49,-50,-51,-52,73,73,73,73,73,73,73,73,73,-58,-27,-35,73,73,73,-57,40,-34,40,40,40,73,-38,73,-41,-44,40,-40,40,73,40,-43,40,40,-42,40,73,-39,73,40,40,-45,-46,]),'NOT':([21,24,25,29,40,42,43,52,53,54,55,56,58,60,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,92,93,94,95,97,98,99,100,125,126,133,135,136,137,140,142,143,144,145,146,149,151,152,153,154,155,157,159,160,161,162,],[-15,43,43,43,43,43,43,43,43,-30,-25,-31,43,-37,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-28,-26,-29,-32,-36,43,43,43,-27,-35,43,43,43,43,-38,-41,-44,43,-40,43,43,-43,43,43,-42,43,-39,43,43,-45,-46,]),'INTEGERNUMBER':([21,24,25,29,40,42,43,52,53,54,55,56,58,60,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,92,93,94,95,97,98,99,100,125,126,133,135,136,137,140,142,143,144,145,146,149,151,152,153,154,155,157,159,160,161,162,],[-15,44,44,44,44,44,44,44,44,-30,-25,-31,44,-37,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-28,-26,-29,-32,-36,44,44,44,-27,-35,44,44,44,44,-38,-41,-44,44,-40,44,44,-43,44,44,-42,44,-39,44,44,-45,-46,]),'FLOATNUMBER':([21,24,25,29,40,42,43,52,53,54,55,56,58,60,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,92,93,94,95,97,98,99,100,125,126,133,135,136,137,140,142,143,144,145,146,149,151,152,153,154,155,157,159,160,161,162,],[-15,45,45,45,45,45,45,45,45,-30,-25,-31,45,-37,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-28,-26,-29,-32,-36,45,45,45,-27,-35,45,45,45,45,-38,-41,-44,45,-40,45,45,-43,45,45,-42,45,-39,45,45,-45,-46,]),'TRUE':([21,24,25,29,40,42,43,52,53,54,55,56,58,60,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,92,93,94,95,97,98,99,100,125,126,133,135,136,137,140,142,143,144,145,146,149,151,152,153,154,155,157,159,160,161,162,],[-15,46,46,46,46,46,46,46,46,-30,-25,-31,46,-37,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-28,-26,-29,-32,-36,46,46,46,-27,-35,46,46,46,46,-38,-41,-44,46,-40,46,46,-43,46,46,-42,46,-39,46,46,-45,-46,]),'FALSE':([21,24,25,29,40,42,43,52,53,54,55,56,58,60,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,92,93,94,95,97,98,99,100,125,126,133,135,136,137,140,142,143,144,145,146,149,151,152,153,154,155,157,159,160,161,162,],[-15,47,47,47,47,47,47,47,47,-30,-25,-31,47,-37,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-28,-26,-29,-32,-36,47,47,47,-27,-35,47,47,47,47,-38,-41,-44,47,-40,47,47,-43,47,47,-42,47,-39,47,47,-45,-46,]),'RSB':([37,38,39,41,44,45,46,47,86,88,102,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,132,134,],[-33,71,-56,-55,-62,-63,-64,-65,-60,-61,131,-59,134,-48,-49,-50,-51,-52,-53,-54,-66,-67,-68,-69,-70,-71,-47,-58,-57,-34,]),'SUM':([37,38,39,41,44,45,46,47,48,59,86,87,88,96,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,128,129,132,134,139,141,148,156,158,],[-33,72,-56,-55,-62,-63,-64,-65,72,72,-60,72,72,72,-59,72,72,-48,-49,-50,-51,-52,72,72,72,72,72,72,72,72,72,-58,72,72,72,-57,-34,72,72,72,72,72,]),'MUL':([37,38,39,41,44,45,46,47,48,59,86,87,88,96,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,128,129,132,134,139,141,148,156,158,],[-33,74,-56,-55,-62,-63,-64,-65,74,74,74,74,74,74,-59,74,74,74,74,-50,-51,-52,74,74,74,74,74,74,74,74,74,-58,74,74,74,-57,-34,74,74,74,74,74,]),'DIV':([37,38,39,41,44,45,46,47,48,59,86,87,88,96,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,128,129,132,134,139,141,148,156,158,],[-33,75,-56,-55,-62,-63,-64,-65,75,75,75,75,75,75,-59,75,75,75,75,-50,-51,-52,75,75,75,75,75,75,75,75,75,-58,75,75,75,-57,-34,75,75,75,75,75,]),'MOD':([37,38,39,41,44,45,46,47,48,59,86,87,88,96,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,128,129,132,134,139,141,148,156,158,],[-33,76,-56,-55,-62,-63,-64,-65,76,76,76,76,76,76,-59,76,76,76,76,-50,-51,-52,76,76,76,76,76,76,76,76,76,-58,76,76,76,-57,-34,76,76,76,76,76,]),'OR':([37,38,39,41,44,45,46,47,48,59,86,87,88,96,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,128,129,132,134,139,141,148,156,158,],[-33,77,-56,-55,-62,-63,-64,-65,77,77,-60,77,77,77,-59,77,77,-48,-49,-50,-51,-52,-53,-54,-66,-67,-68,-69,-70,-71,77,-58,77,77,77,-57,-34,77,77,77,77,77,]),'AND':([37,38,39,41,44,45,46,47,48,59,86,87,88,96,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,128,129,132,134,139,141,148,156,158,],[-33,78,-56,-55,-62,-63,-64,-65,78,78,-60,78,78,78,-59,78,78,-48,-49,-50,-51,-52,78,-54,-66,-67,-68,-69,-70,-71,78,-58,78,78,78,-57,-34,78,78,78,78,78,]),'GT':([37,38,39,41,44,45,46,47,48,59,86,87,88,96,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,128,129,132,134,139,141,148,156,158,],[-33,79,-56,-55,-62,-63,-64,-65,79,79,-60,79,79,79,-59,79,79,-48,-49,-50,-51,-52,79,79,-66,79,-68,-69,-70,-71,79,-58,79,79,79,-57,-34,79,79,79,79,79,]),'LT':([37,38,39,41,44,45,46,47,48,59,86,87,88,96,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,128,129,132,134,139,141,148,156,158,],[-33,80,-56,-55,-62,-63,-64,-65,80,80,-60,80,80,80,-59,80,80,-48,-49,-50,-51,-52,80,80,-66,-67,-68,-69,-70,-71,80,-58,80,80,80,-57,-34,80,80,80,80,80,]),'NE':([37,38,39,41,44,45,46,47,48,59,86,87,88,96,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,128,129,132,134,139,141,148,156,158,],[-33,81,-56,-55,-62,-63,-64,-65,81,81,-60,81,81,81,-59,81,81,-48,-49,-50,-51,-52,81,81,81,81,-68,-69,-70,81,81,-58,81,81,81,-57,-34,81,81,81,81,81,]),'EQ':([37,38,39,41,44,45,46,47,48,59,86,87,88,96,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,128,129,132,134,139,141,148,156,158,],[-33,82,-56,-55,-62,-63,-64,-65,82,82,-60,82,82,82,-59,82,82,-48,-49,-50,-51,-52,82,82,82,82,82,-69,-70,82,82,-58,82,82,82,-57,-34,82,82,82,82,82,]),'LE':([37,38,39,41,44,45,46,47,48,59,86,87,88,96,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,128,129,132,134,139,141,148,156,158,],[-33,83,-56,-55,-62,-63,-64,-65,83,83,-60,83,83,83,-59,83,83,-48,-49,-50,-51,-52,83,83,83,83,83,83,-70,83,83,-58,83,83,83,-57,-34,83,83,83,83,83,]),'GE':([37,38,39,41,44,45,46,47,48,59,86,87,88,96,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,127,128,129,132,134,139,141,148,156,158,],[-33,84,-56,-55,-62,-63,-64,-65,84,84,-60,84,84,84,-59,84,84,-48,-49,-50,-51,-52,84,84,84,84,-68,-69,-70,-71,84,-58,84,84,84,-57,-34,84,84,84,84,84,]),'ELSE':([54,60,92,94,97,125,126,140,142,143,145,151,154,157,161,162,],[-30,-37,-28,-29,-36,-27,-35,-38,146,-44,149,-43,-42,-39,-45,-46,]),'ELIF':([54,60,92,94,97,125,126,140,142,143,145,151,154,157,161,162,],[-30,-37,-28,-29,-36,-27,-35,-38,147,-44,150,-43,-42,-39,-45,-46,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declist':([0,],[2,]),'dec':([0,2,],[4,13,]),'vardec':([0,2,29,52,],[5,5,55,93,]),'funcdec':([0,2,],[6,6,]),'type':([0,2,23,26,29,52,68,],[7,7,32,32,57,57,32,]),'idlist':([7,57,],[15,15,]),'iddec':([7,22,57,],[17,30,17,]),'block':([20,27,29,34,50,52,53,66,89,91,135,137,146,149,153,159,160,],[28,51,60,67,90,60,60,103,124,60,60,60,60,60,60,60,60,]),'paramdecs':([23,26,],[33,49,]),'paramdecslist':([23,26,],[35,35,]),'paramdec':([23,26,68,],[36,36,104,]),'exp':([24,25,29,40,42,43,52,53,58,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,98,99,100,133,135,136,137,144,146,149,152,153,155,159,160,],[38,48,59,86,87,88,59,59,96,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,59,127,128,129,139,59,141,59,148,59,59,156,59,158,59,59,]),'lvalue':([24,25,29,40,42,43,52,53,58,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,98,99,100,133,135,136,137,144,146,149,152,153,155,159,160,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'const':([24,25,29,40,42,43,52,53,58,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,98,99,100,133,135,136,137,144,146,149,152,153,155,159,160,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'varlist':([29,],[52,]),'stmtlist':([29,52,],[53,91,]),'stmt':([29,52,53,91,135,137,146,149,153,159,160,],[56,56,95,95,140,142,151,154,157,161,162,]),'explist':([69,],[105,]),'elseiflist':([142,],[145,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declist MAIN LRB RRB block','program',5,'p_program','parser.py',12),
  ('program -> MAIN LRB RRB block','program',4,'p_program_2','parser.py',16),
  ('declist -> dec','declist',1,'p_declist_dec','parser.py',20),
  ('declist -> declist dec','declist',2,'p_declist_declist','parser.py',24),
  ('dec -> vardec','dec',1,'p_dec_vardec','parser.py',28),
  ('dec -> funcdec','dec',1,'p_dec_funcdec','parser.py',32),
  ('type -> INTEGER','type',1,'p_type_int','parser.py',36),
  ('type -> FLOAT','type',1,'p_type_float','parser.py',40),
  ('type -> BOOLEAN','type',1,'p_type_bool','parser.py',44),
  ('iddec -> ID','iddec',1,'p_iddec_id','parser.py',48),
  ('iddec -> ID LSB exp RSB','iddec',4,'p_iddec_id_s_exp','parser.py',52),
  ('iddec -> ID ASSIGN exp','iddec',3,'p_iddec_id_assign_exp','parser.py',56),
  ('idlist -> iddec','idlist',1,'p_idlist_iddec','parser.py',60),
  ('idlist -> idlist COMMA iddec','idlist',3,'p_idlist_idlist','parser.py',64),
  ('vardec -> type idlist SEMICOLON','vardec',3,'p_vardec','parser.py',68),
  ('funcdec -> type ID LRB paramdecs RRB block','funcdec',6,'p_funcdec_type','parser.py',72),
  ('funcdec -> type ID LRB RRB block','funcdec',5,'p_funcdec_type_2','parser.py',76),
  ('funcdec -> VOID ID LRB paramdecs RRB block','funcdec',6,'p_funcdec_void','parser.py',80),
  ('funcdec -> VOID ID LRB RRB block','funcdec',5,'p_funcdec_void_2','parser.py',84),
  ('paramdecs -> paramdecslist','paramdecs',1,'p_paramdecs_list','parser.py',88),
  ('paramdecslist -> paramdec','paramdecslist',1,'p_paramdecslist_paramdec','parser.py',92),
  ('paramdecslist -> paramdecslist COMMA paramdec','paramdecslist',3,'p_paramdecslist_paramdecslist','parser.py',96),
  ('paramdec -> type ID','paramdec',2,'p_paramdec','parser.py',100),
  ('paramdec -> type ID LSB RSB','paramdec',4,'p_paramdec_s','parser.py',104),
  ('varlist -> vardec','varlist',1,'p_varlist_vardec','parser.py',108),
  ('varlist -> varlist vardec','varlist',2,'p_varlist_varlist','parser.py',112),
  ('block -> LCB varlist stmtlist RCB','block',4,'p_block','parser.py',116),
  ('block -> LCB varlist RCB','block',3,'p_block_varlist','parser.py',120),
  ('block -> LCB stmtlist RCB','block',3,'p_block_stmtlist','parser.py',124),
  ('block -> LCB RCB','block',2,'p_block_empty','parser.py',128),
  ('stmtlist -> stmt','stmtlist',1,'p_stmtlist_stmt','parser.py',132),
  ('stmtlist -> stmtlist stmt','stmtlist',2,'p_stmtlist_stmtlist','parser.py',136),
  ('lvalue -> ID','lvalue',1,'p_lvalue_id','parser.py',140),
  ('lvalue -> ID LSB exp RSB','lvalue',4,'p_lvalue_exp','parser.py',144),
  ('stmt -> RETURN exp SEMICOLON','stmt',3,'p_stmt_return','parser.py',148),
  ('stmt -> exp SEMICOLON','stmt',2,'p_stmt_exp','parser.py',152),
  ('stmt -> block','stmt',1,'p_stmt_block','parser.py',156),
  ('stmt -> WHILE LRB exp RRB stmt','stmt',5,'p_stmt_while','parser.py',160),
  ('stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt','stmt',9,'p_stmt_for','parser.py',164),
  ('stmt -> IF LRB exp RRB stmt elseiflist','stmt',6,'p_stmt_if','parser.py',168),
  ('stmt -> IF LRB exp RRB stmt','stmt',5,'p_stmt_if_elseif','parser.py',172),
  ('stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt','stmt',8,'p_stmt_if_long','parser.py',176),
  ('stmt -> IF LRB exp RRB stmt ELSE stmt','stmt',7,'p_stmt_if_long_long','parser.py',180),
  ('stmt -> PRINT LRB ID RRB SEMICOLON','stmt',5,'p_stmt_print','parser.py',184),
  ('elseiflist -> ELIF LRB exp RRB stmt','elseiflist',5,'p_elseiflist_elif','parser.py',188),
  ('elseiflist -> elseiflist ELIF LRB exp RRB stmt','elseiflist',6,'p_elseiflist_elseiflist','parser.py',192),
  ('exp -> lvalue ASSIGN exp','exp',3,'p_exp_lvalue_exp','parser.py',196),
  ('exp -> exp SUM exp','exp',3,'p_exp_sum','parser.py',200),
  ('exp -> exp SUB exp','exp',3,'p_exp_sub','parser.py',204),
  ('exp -> exp MUL exp','exp',3,'p_exp_mul','parser.py',208),
  ('exp -> exp DIV exp','exp',3,'p_exp_div','parser.py',212),
  ('exp -> exp MOD exp','exp',3,'p_exp_mod','parser.py',216),
  ('exp -> exp OR exp','exp',3,'p_exp_or','parser.py',220),
  ('exp -> exp AND exp','exp',3,'p_exp_and','parser.py',224),
  ('exp -> const','exp',1,'p_exp_const','parser.py',228),
  ('exp -> lvalue','exp',1,'p_exp_lvalue','parser.py',232),
  ('exp -> ID LRB explist RRB','exp',4,'p_exp_id_explist','parser.py',236),
  ('exp -> LRB exp RRB','exp',3,'p_exp_r_exp','parser.py',240),
  ('exp -> ID LRB RRB','exp',3,'p_exp_id','parser.py',244),
  ('exp -> SUB exp','exp',2,'p_exp_sub_exp','parser.py',248),
  ('exp -> NOT exp','exp',2,'p_exp_not_exp','parser.py',252),
  ('const -> INTEGERNUMBER','const',1,'p_const_int','parser.py',256),
  ('const -> FLOATNUMBER','const',1,'p_const_float','parser.py',260),
  ('const -> TRUE','const',1,'p_const_true','parser.py',264),
  ('const -> FALSE','const',1,'p_const_false','parser.py',268),
  ('exp -> exp GT exp','exp',3,'p_relop_gt','parser.py',272),
  ('exp -> exp LT exp','exp',3,'p_relop_lt','parser.py',276),
  ('exp -> exp NE exp','exp',3,'p_relop_ne','parser.py',280),
  ('exp -> exp EQ exp','exp',3,'p_relop_eq','parser.py',284),
  ('exp -> exp LE exp','exp',3,'p_relop_le','parser.py',288),
  ('exp -> exp GE exp','exp',3,'p_relop_ge','parser.py',292),
  ('explist -> exp','explist',1,'p_explist_exp','parser.py',296),
  ('explist -> explist COMMA exp','explist',3,'p_explist_explist','parser.py',300),
]
