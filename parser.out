Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ERROR

Grammar

Rule 0     S' -> program
Rule 1     program -> declist MAIN LRB RRB block
Rule 2     program -> MAIN LRB RRB block
Rule 3     declist -> dec
Rule 4     declist -> declist dec
Rule 5     dec -> vardec
Rule 6     dec -> funcdec
Rule 7     type -> INTEGER
Rule 8     type -> FLOAT
Rule 9     type -> BOOLEAN
Rule 10    iddec -> ID
Rule 11    iddec -> ID LSB exp RSB
Rule 12    iddec -> ID ASSIGN exp
Rule 13    idlist -> iddec
Rule 14    idlist -> idlist COMMA iddec
Rule 15    vardec -> type idlist SEMICOLON
Rule 16    funcdec -> type ID LRB paramdecs RRB block
Rule 17    funcdec -> type ID LRB RRB block
Rule 18    funcdec -> VOID ID LRB paramdecs RRB block
Rule 19    funcdec -> VOID ID LRB RRB block
Rule 20    paramdecs -> paramdecslist
Rule 21    paramdecslist -> paramdec
Rule 22    paramdecslist -> paramdecslist COMMA paramdec
Rule 23    paramdec -> type ID
Rule 24    paramdec -> type ID LSB RSB
Rule 25    varlist -> vardec
Rule 26    varlist -> varlist vardec
Rule 27    block -> LCB varlist stmtlist RCB
Rule 28    block -> LCB varlist RCB
Rule 29    block -> LCB stmtlist RCB
Rule 30    block -> LCB RCB
Rule 31    stmtlist -> stmt
Rule 32    stmtlist -> stmtlist stmt
Rule 33    lvalue -> ID
Rule 34    lvalue -> ID LSB exp RSB
Rule 35    stmt -> RETURN exp SEMICOLON
Rule 36    stmt -> exp SEMICOLON
Rule 37    stmt -> block
Rule 38    stmt -> WHILE LRB exp RRB stmt
Rule 39    stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
Rule 40    stmt -> IF LRB exp RRB stmt elseiflist
Rule 41    stmt -> IF LRB exp RRB stmt
Rule 42    stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt
Rule 43    stmt -> IF LRB exp RRB stmt ELSE stmt
Rule 44    stmt -> PRINT LRB ID RRB SEMICOLON
Rule 45    elseiflist -> ELIF LRB exp RRB stmt
Rule 46    elseiflist -> elseiflist ELIF LRB exp RRB stmt
Rule 47    exp -> lvalue ASSIGN exp
Rule 48    exp -> exp SUM exp
Rule 49    exp -> exp SUB exp
Rule 50    exp -> exp MUL exp
Rule 51    exp -> exp DIV exp
Rule 52    exp -> exp MOD exp
Rule 53    exp -> exp OR exp
Rule 54    exp -> exp AND exp
Rule 55    exp -> const
Rule 56    exp -> lvalue
Rule 57    exp -> ID LRB explist RRB
Rule 58    exp -> LRB exp RRB
Rule 59    exp -> ID LRB RRB
Rule 60    exp -> SUB exp
Rule 61    exp -> NOT exp
Rule 62    const -> INTEGERNUMBER
Rule 63    const -> FLOATNUMBER
Rule 64    const -> TRUE
Rule 65    const -> FALSE
Rule 66    exp -> exp GT exp
Rule 67    exp -> exp LT exp
Rule 68    exp -> exp NE exp
Rule 69    exp -> exp EQ exp
Rule 70    exp -> exp LE exp
Rule 71    exp -> exp GE exp
Rule 72    explist -> exp
Rule 73    explist -> explist COMMA exp

Terminals, with rules where they appear

AND                  : 54
ASSIGN               : 12 47
BOOLEAN              : 9
COMMA                : 14 22 73
DIV                  : 51
ELIF                 : 45 46
ELSE                 : 42 43
EQ                   : 69
ERROR                : 
FALSE                : 65
FLOAT                : 8
FLOATNUMBER          : 63
FOR                  : 39
GE                   : 71
GT                   : 66
ID                   : 10 11 12 16 17 18 19 23 24 33 34 44 57 59
IF                   : 40 41 42 43
INTEGER              : 7
INTEGERNUMBER        : 62
LCB                  : 27 28 29 30
LE                   : 70
LRB                  : 1 2 16 17 18 19 38 39 40 41 42 43 44 45 46 57 58 59
LSB                  : 11 24 34
LT                   : 67
MAIN                 : 1 2
MOD                  : 52
MUL                  : 50
NE                   : 68
NOT                  : 61
OR                   : 53
PRINT                : 44
RCB                  : 27 28 29 30
RETURN               : 35
RRB                  : 1 2 16 17 18 19 38 39 40 41 42 43 44 45 46 57 58 59
RSB                  : 11 24 34
SEMICOLON            : 15 35 36 39 39 44
SUB                  : 49 60
SUM                  : 48
TRUE                 : 64
VOID                 : 18 19
WHILE                : 38
error                : 

Nonterminals, with rules where they appear

block                : 1 2 16 17 18 19 37
const                : 55
dec                  : 3 4
declist              : 1 4
elseiflist           : 40 42 46
exp                  : 11 12 34 35 36 38 39 39 39 40 41 42 43 45 46 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 58 60 61 66 66 67 67 68 68 69 69 70 70 71 71 72 73
explist              : 57 73
funcdec              : 6
iddec                : 13 14
idlist               : 14 15
lvalue               : 47 56
paramdec             : 21 22
paramdecs            : 16 18
paramdecslist        : 20 22
program              : 0
stmt                 : 31 32 38 39 40 41 42 42 43 43 45 46
stmtlist             : 27 29 32
type                 : 15 16 17 23 24
vardec               : 5 25 26
varlist              : 26 27 28

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declist MAIN LRB RRB block
    (2) program -> . MAIN LRB RRB block
    (3) declist -> . dec
    (4) declist -> . declist dec
    (5) dec -> . vardec
    (6) dec -> . funcdec
    (15) vardec -> . type idlist SEMICOLON
    (16) funcdec -> . type ID LRB paramdecs RRB block
    (17) funcdec -> . type ID LRB RRB block
    (18) funcdec -> . VOID ID LRB paramdecs RRB block
    (19) funcdec -> . VOID ID LRB RRB block
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    MAIN            shift and go to state 3
    VOID            shift and go to state 8
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 10
    BOOLEAN         shift and go to state 11

    program                        shift and go to state 1
    declist                        shift and go to state 2
    dec                            shift and go to state 4
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    type                           shift and go to state 7

state 1

    (0) S' -> program .



state 2

    (1) program -> declist . MAIN LRB RRB block
    (4) declist -> declist . dec
    (5) dec -> . vardec
    (6) dec -> . funcdec
    (15) vardec -> . type idlist SEMICOLON
    (16) funcdec -> . type ID LRB paramdecs RRB block
    (17) funcdec -> . type ID LRB RRB block
    (18) funcdec -> . VOID ID LRB paramdecs RRB block
    (19) funcdec -> . VOID ID LRB RRB block
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    MAIN            shift and go to state 12
    VOID            shift and go to state 8
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 10
    BOOLEAN         shift and go to state 11

    dec                            shift and go to state 13
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    type                           shift and go to state 7

state 3

    (2) program -> MAIN . LRB RRB block

    LRB             shift and go to state 14


state 4

    (3) declist -> dec .

    MAIN            reduce using rule 3 (declist -> dec .)
    VOID            reduce using rule 3 (declist -> dec .)
    INTEGER         reduce using rule 3 (declist -> dec .)
    FLOAT           reduce using rule 3 (declist -> dec .)
    BOOLEAN         reduce using rule 3 (declist -> dec .)


state 5

    (5) dec -> vardec .

    MAIN            reduce using rule 5 (dec -> vardec .)
    VOID            reduce using rule 5 (dec -> vardec .)
    INTEGER         reduce using rule 5 (dec -> vardec .)
    FLOAT           reduce using rule 5 (dec -> vardec .)
    BOOLEAN         reduce using rule 5 (dec -> vardec .)


state 6

    (6) dec -> funcdec .

    MAIN            reduce using rule 6 (dec -> funcdec .)
    VOID            reduce using rule 6 (dec -> funcdec .)
    INTEGER         reduce using rule 6 (dec -> funcdec .)
    FLOAT           reduce using rule 6 (dec -> funcdec .)
    BOOLEAN         reduce using rule 6 (dec -> funcdec .)


state 7

    (15) vardec -> type . idlist SEMICOLON
    (16) funcdec -> type . ID LRB paramdecs RRB block
    (17) funcdec -> type . ID LRB RRB block
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    ID              shift and go to state 16

    idlist                         shift and go to state 15
    iddec                          shift and go to state 17

state 8

    (18) funcdec -> VOID . ID LRB paramdecs RRB block
    (19) funcdec -> VOID . ID LRB RRB block

    ID              shift and go to state 18


state 9

    (7) type -> INTEGER .

    ID              reduce using rule 7 (type -> INTEGER .)


state 10

    (8) type -> FLOAT .

    ID              reduce using rule 8 (type -> FLOAT .)


state 11

    (9) type -> BOOLEAN .

    ID              reduce using rule 9 (type -> BOOLEAN .)


state 12

    (1) program -> declist MAIN . LRB RRB block

    LRB             shift and go to state 19


state 13

    (4) declist -> declist dec .

    MAIN            reduce using rule 4 (declist -> declist dec .)
    VOID            reduce using rule 4 (declist -> declist dec .)
    INTEGER         reduce using rule 4 (declist -> declist dec .)
    FLOAT           reduce using rule 4 (declist -> declist dec .)
    BOOLEAN         reduce using rule 4 (declist -> declist dec .)


state 14

    (2) program -> MAIN LRB . RRB block

    RRB             shift and go to state 20


state 15

    (15) vardec -> type idlist . SEMICOLON
    (14) idlist -> idlist . COMMA iddec

    SEMICOLON       shift and go to state 21
    COMMA           shift and go to state 22


state 16

    (16) funcdec -> type ID . LRB paramdecs RRB block
    (17) funcdec -> type ID . LRB RRB block
    (10) iddec -> ID .
    (11) iddec -> ID . LSB exp RSB
    (12) iddec -> ID . ASSIGN exp

    LRB             shift and go to state 23
    SEMICOLON       reduce using rule 10 (iddec -> ID .)
    COMMA           reduce using rule 10 (iddec -> ID .)
    LSB             shift and go to state 24
    ASSIGN          shift and go to state 25


state 17

    (13) idlist -> iddec .

    SEMICOLON       reduce using rule 13 (idlist -> iddec .)
    COMMA           reduce using rule 13 (idlist -> iddec .)


state 18

    (18) funcdec -> VOID ID . LRB paramdecs RRB block
    (19) funcdec -> VOID ID . LRB RRB block

    LRB             shift and go to state 26


state 19

    (1) program -> declist MAIN LRB . RRB block

    RRB             shift and go to state 27


state 20

    (2) program -> MAIN LRB RRB . block
    (27) block -> . LCB varlist stmtlist RCB
    (28) block -> . LCB varlist RCB
    (29) block -> . LCB stmtlist RCB
    (30) block -> . LCB RCB

    LCB             shift and go to state 29

    block                          shift and go to state 28

state 21

    (15) vardec -> type idlist SEMICOLON .

    MAIN            reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    VOID            reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    INTEGER         reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    FLOAT           reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    BOOLEAN         reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    RCB             reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    RETURN          reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    WHILE           reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    FOR             reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    IF              reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    PRINT           reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    ID              reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    LRB             reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    SUB             reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    NOT             reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    LCB             reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    INTEGERNUMBER   reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    FLOATNUMBER     reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    TRUE            reduce using rule 15 (vardec -> type idlist SEMICOLON .)
    FALSE           reduce using rule 15 (vardec -> type idlist SEMICOLON .)


state 22

    (14) idlist -> idlist COMMA . iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    ID              shift and go to state 31

    iddec                          shift and go to state 30

state 23

    (16) funcdec -> type ID LRB . paramdecs RRB block
    (17) funcdec -> type ID LRB . RRB block
    (20) paramdecs -> . paramdecslist
    (21) paramdecslist -> . paramdec
    (22) paramdecslist -> . paramdecslist COMMA paramdec
    (23) paramdec -> . type ID
    (24) paramdec -> . type ID LSB RSB
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    RRB             shift and go to state 34
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 10
    BOOLEAN         shift and go to state 11

    type                           shift and go to state 32
    paramdecs                      shift and go to state 33
    paramdecslist                  shift and go to state 35
    paramdec                       shift and go to state 36

state 24

    (11) iddec -> ID LSB . exp RSB
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 38
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 25

    (12) iddec -> ID ASSIGN . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 48
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 26

    (18) funcdec -> VOID ID LRB . paramdecs RRB block
    (19) funcdec -> VOID ID LRB . RRB block
    (20) paramdecs -> . paramdecslist
    (21) paramdecslist -> . paramdec
    (22) paramdecslist -> . paramdecslist COMMA paramdec
    (23) paramdec -> . type ID
    (24) paramdec -> . type ID LSB RSB
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    RRB             shift and go to state 50
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 10
    BOOLEAN         shift and go to state 11

    paramdecs                      shift and go to state 49
    paramdecslist                  shift and go to state 35
    paramdec                       shift and go to state 36
    type                           shift and go to state 32

state 27

    (1) program -> declist MAIN LRB RRB . block
    (27) block -> . LCB varlist stmtlist RCB
    (28) block -> . LCB varlist RCB
    (29) block -> . LCB stmtlist RCB
    (30) block -> . LCB RCB

    LCB             shift and go to state 29

    block                          shift and go to state 51

state 28

    (2) program -> MAIN LRB RRB block .

    $end            reduce using rule 2 (program -> MAIN LRB RRB block .)


state 29

    (27) block -> LCB . varlist stmtlist RCB
    (28) block -> LCB . varlist RCB
    (29) block -> LCB . stmtlist RCB
    (30) block -> LCB . RCB
    (25) varlist -> . vardec
    (26) varlist -> . varlist vardec
    (31) stmtlist -> . stmt
    (32) stmtlist -> . stmtlist stmt
    (15) vardec -> . type idlist SEMICOLON
    (35) stmt -> . RETURN exp SEMICOLON
    (36) stmt -> . exp SEMICOLON
    (37) stmt -> . block
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (43) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (27) block -> . LCB varlist stmtlist RCB
    (28) block -> . LCB varlist RCB
    (29) block -> . LCB stmtlist RCB
    (30) block -> . LCB RCB
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    RCB             shift and go to state 54
    RETURN          shift and go to state 58
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 10
    BOOLEAN         shift and go to state 11
    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    LCB             shift and go to state 29
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    varlist                        shift and go to state 52
    stmtlist                       shift and go to state 53
    vardec                         shift and go to state 55
    stmt                           shift and go to state 56
    type                           shift and go to state 57
    exp                            shift and go to state 59
    block                          shift and go to state 60
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 30

    (14) idlist -> idlist COMMA iddec .

    SEMICOLON       reduce using rule 14 (idlist -> idlist COMMA iddec .)
    COMMA           reduce using rule 14 (idlist -> idlist COMMA iddec .)


state 31

    (10) iddec -> ID .
    (11) iddec -> ID . LSB exp RSB
    (12) iddec -> ID . ASSIGN exp

    SEMICOLON       reduce using rule 10 (iddec -> ID .)
    COMMA           reduce using rule 10 (iddec -> ID .)
    LSB             shift and go to state 24
    ASSIGN          shift and go to state 25


state 32

    (23) paramdec -> type . ID
    (24) paramdec -> type . ID LSB RSB

    ID              shift and go to state 65


state 33

    (16) funcdec -> type ID LRB paramdecs . RRB block

    RRB             shift and go to state 66


state 34

    (17) funcdec -> type ID LRB RRB . block
    (27) block -> . LCB varlist stmtlist RCB
    (28) block -> . LCB varlist RCB
    (29) block -> . LCB stmtlist RCB
    (30) block -> . LCB RCB

    LCB             shift and go to state 29

    block                          shift and go to state 67

state 35

    (20) paramdecs -> paramdecslist .
    (22) paramdecslist -> paramdecslist . COMMA paramdec

    RRB             reduce using rule 20 (paramdecs -> paramdecslist .)
    COMMA           shift and go to state 68


state 36

    (21) paramdecslist -> paramdec .

    COMMA           reduce using rule 21 (paramdecslist -> paramdec .)
    RRB             reduce using rule 21 (paramdecslist -> paramdec .)


state 37

    (57) exp -> ID . LRB explist RRB
    (59) exp -> ID . LRB RRB
    (33) lvalue -> ID .
    (34) lvalue -> ID . LSB exp RSB

    LRB             shift and go to state 69
    ASSIGN          reduce using rule 33 (lvalue -> ID .)
    RSB             reduce using rule 33 (lvalue -> ID .)
    SUM             reduce using rule 33 (lvalue -> ID .)
    SUB             reduce using rule 33 (lvalue -> ID .)
    MUL             reduce using rule 33 (lvalue -> ID .)
    DIV             reduce using rule 33 (lvalue -> ID .)
    MOD             reduce using rule 33 (lvalue -> ID .)
    OR              reduce using rule 33 (lvalue -> ID .)
    AND             reduce using rule 33 (lvalue -> ID .)
    GT              reduce using rule 33 (lvalue -> ID .)
    LT              reduce using rule 33 (lvalue -> ID .)
    NE              reduce using rule 33 (lvalue -> ID .)
    EQ              reduce using rule 33 (lvalue -> ID .)
    LE              reduce using rule 33 (lvalue -> ID .)
    GE              reduce using rule 33 (lvalue -> ID .)
    SEMICOLON       reduce using rule 33 (lvalue -> ID .)
    COMMA           reduce using rule 33 (lvalue -> ID .)
    RRB             reduce using rule 33 (lvalue -> ID .)
    LSB             shift and go to state 70


state 38

    (11) iddec -> ID LSB exp . RSB
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RSB             shift and go to state 71
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    OR              shift and go to state 77
    AND             shift and go to state 78
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84


state 39

    (47) exp -> lvalue . ASSIGN exp
    (56) exp -> lvalue .

    ASSIGN          shift and go to state 85
    RSB             reduce using rule 56 (exp -> lvalue .)
    SUM             reduce using rule 56 (exp -> lvalue .)
    SUB             reduce using rule 56 (exp -> lvalue .)
    MUL             reduce using rule 56 (exp -> lvalue .)
    DIV             reduce using rule 56 (exp -> lvalue .)
    MOD             reduce using rule 56 (exp -> lvalue .)
    OR              reduce using rule 56 (exp -> lvalue .)
    AND             reduce using rule 56 (exp -> lvalue .)
    GT              reduce using rule 56 (exp -> lvalue .)
    LT              reduce using rule 56 (exp -> lvalue .)
    NE              reduce using rule 56 (exp -> lvalue .)
    EQ              reduce using rule 56 (exp -> lvalue .)
    LE              reduce using rule 56 (exp -> lvalue .)
    GE              reduce using rule 56 (exp -> lvalue .)
    SEMICOLON       reduce using rule 56 (exp -> lvalue .)
    COMMA           reduce using rule 56 (exp -> lvalue .)
    RRB             reduce using rule 56 (exp -> lvalue .)


state 40

    (60) exp -> SUB . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 86
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 41

    (55) exp -> const .

    RSB             reduce using rule 55 (exp -> const .)
    SUM             reduce using rule 55 (exp -> const .)
    SUB             reduce using rule 55 (exp -> const .)
    MUL             reduce using rule 55 (exp -> const .)
    DIV             reduce using rule 55 (exp -> const .)
    MOD             reduce using rule 55 (exp -> const .)
    OR              reduce using rule 55 (exp -> const .)
    AND             reduce using rule 55 (exp -> const .)
    GT              reduce using rule 55 (exp -> const .)
    LT              reduce using rule 55 (exp -> const .)
    NE              reduce using rule 55 (exp -> const .)
    EQ              reduce using rule 55 (exp -> const .)
    LE              reduce using rule 55 (exp -> const .)
    GE              reduce using rule 55 (exp -> const .)
    SEMICOLON       reduce using rule 55 (exp -> const .)
    COMMA           reduce using rule 55 (exp -> const .)
    RRB             reduce using rule 55 (exp -> const .)


state 42

    (58) exp -> LRB . exp RRB
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 87
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 43

    (61) exp -> NOT . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 88
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 44

    (62) const -> INTEGERNUMBER .

    RSB             reduce using rule 62 (const -> INTEGERNUMBER .)
    SUM             reduce using rule 62 (const -> INTEGERNUMBER .)
    SUB             reduce using rule 62 (const -> INTEGERNUMBER .)
    MUL             reduce using rule 62 (const -> INTEGERNUMBER .)
    DIV             reduce using rule 62 (const -> INTEGERNUMBER .)
    MOD             reduce using rule 62 (const -> INTEGERNUMBER .)
    OR              reduce using rule 62 (const -> INTEGERNUMBER .)
    AND             reduce using rule 62 (const -> INTEGERNUMBER .)
    GT              reduce using rule 62 (const -> INTEGERNUMBER .)
    LT              reduce using rule 62 (const -> INTEGERNUMBER .)
    NE              reduce using rule 62 (const -> INTEGERNUMBER .)
    EQ              reduce using rule 62 (const -> INTEGERNUMBER .)
    LE              reduce using rule 62 (const -> INTEGERNUMBER .)
    GE              reduce using rule 62 (const -> INTEGERNUMBER .)
    SEMICOLON       reduce using rule 62 (const -> INTEGERNUMBER .)
    COMMA           reduce using rule 62 (const -> INTEGERNUMBER .)
    RRB             reduce using rule 62 (const -> INTEGERNUMBER .)


state 45

    (63) const -> FLOATNUMBER .

    RSB             reduce using rule 63 (const -> FLOATNUMBER .)
    SUM             reduce using rule 63 (const -> FLOATNUMBER .)
    SUB             reduce using rule 63 (const -> FLOATNUMBER .)
    MUL             reduce using rule 63 (const -> FLOATNUMBER .)
    DIV             reduce using rule 63 (const -> FLOATNUMBER .)
    MOD             reduce using rule 63 (const -> FLOATNUMBER .)
    OR              reduce using rule 63 (const -> FLOATNUMBER .)
    AND             reduce using rule 63 (const -> FLOATNUMBER .)
    GT              reduce using rule 63 (const -> FLOATNUMBER .)
    LT              reduce using rule 63 (const -> FLOATNUMBER .)
    NE              reduce using rule 63 (const -> FLOATNUMBER .)
    EQ              reduce using rule 63 (const -> FLOATNUMBER .)
    LE              reduce using rule 63 (const -> FLOATNUMBER .)
    GE              reduce using rule 63 (const -> FLOATNUMBER .)
    SEMICOLON       reduce using rule 63 (const -> FLOATNUMBER .)
    COMMA           reduce using rule 63 (const -> FLOATNUMBER .)
    RRB             reduce using rule 63 (const -> FLOATNUMBER .)


state 46

    (64) const -> TRUE .

    RSB             reduce using rule 64 (const -> TRUE .)
    SUM             reduce using rule 64 (const -> TRUE .)
    SUB             reduce using rule 64 (const -> TRUE .)
    MUL             reduce using rule 64 (const -> TRUE .)
    DIV             reduce using rule 64 (const -> TRUE .)
    MOD             reduce using rule 64 (const -> TRUE .)
    OR              reduce using rule 64 (const -> TRUE .)
    AND             reduce using rule 64 (const -> TRUE .)
    GT              reduce using rule 64 (const -> TRUE .)
    LT              reduce using rule 64 (const -> TRUE .)
    NE              reduce using rule 64 (const -> TRUE .)
    EQ              reduce using rule 64 (const -> TRUE .)
    LE              reduce using rule 64 (const -> TRUE .)
    GE              reduce using rule 64 (const -> TRUE .)
    SEMICOLON       reduce using rule 64 (const -> TRUE .)
    COMMA           reduce using rule 64 (const -> TRUE .)
    RRB             reduce using rule 64 (const -> TRUE .)


state 47

    (65) const -> FALSE .

    RSB             reduce using rule 65 (const -> FALSE .)
    SUM             reduce using rule 65 (const -> FALSE .)
    SUB             reduce using rule 65 (const -> FALSE .)
    MUL             reduce using rule 65 (const -> FALSE .)
    DIV             reduce using rule 65 (const -> FALSE .)
    MOD             reduce using rule 65 (const -> FALSE .)
    OR              reduce using rule 65 (const -> FALSE .)
    AND             reduce using rule 65 (const -> FALSE .)
    GT              reduce using rule 65 (const -> FALSE .)
    LT              reduce using rule 65 (const -> FALSE .)
    NE              reduce using rule 65 (const -> FALSE .)
    EQ              reduce using rule 65 (const -> FALSE .)
    LE              reduce using rule 65 (const -> FALSE .)
    GE              reduce using rule 65 (const -> FALSE .)
    SEMICOLON       reduce using rule 65 (const -> FALSE .)
    COMMA           reduce using rule 65 (const -> FALSE .)
    RRB             reduce using rule 65 (const -> FALSE .)


state 48

    (12) iddec -> ID ASSIGN exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    SEMICOLON       reduce using rule 12 (iddec -> ID ASSIGN exp .)
    COMMA           reduce using rule 12 (iddec -> ID ASSIGN exp .)
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    OR              shift and go to state 77
    AND             shift and go to state 78
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84


state 49

    (18) funcdec -> VOID ID LRB paramdecs . RRB block

    RRB             shift and go to state 89


state 50

    (19) funcdec -> VOID ID LRB RRB . block
    (27) block -> . LCB varlist stmtlist RCB
    (28) block -> . LCB varlist RCB
    (29) block -> . LCB stmtlist RCB
    (30) block -> . LCB RCB

    LCB             shift and go to state 29

    block                          shift and go to state 90

state 51

    (1) program -> declist MAIN LRB RRB block .

    $end            reduce using rule 1 (program -> declist MAIN LRB RRB block .)


state 52

    (27) block -> LCB varlist . stmtlist RCB
    (28) block -> LCB varlist . RCB
    (26) varlist -> varlist . vardec
    (31) stmtlist -> . stmt
    (32) stmtlist -> . stmtlist stmt
    (15) vardec -> . type idlist SEMICOLON
    (35) stmt -> . RETURN exp SEMICOLON
    (36) stmt -> . exp SEMICOLON
    (37) stmt -> . block
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (43) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (27) block -> . LCB varlist stmtlist RCB
    (28) block -> . LCB varlist RCB
    (29) block -> . LCB stmtlist RCB
    (30) block -> . LCB RCB
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    RCB             shift and go to state 92
    RETURN          shift and go to state 58
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 10
    BOOLEAN         shift and go to state 11
    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    LCB             shift and go to state 29
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    stmtlist                       shift and go to state 91
    vardec                         shift and go to state 93
    stmt                           shift and go to state 56
    type                           shift and go to state 57
    exp                            shift and go to state 59
    block                          shift and go to state 60
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 53

    (29) block -> LCB stmtlist . RCB
    (32) stmtlist -> stmtlist . stmt
    (35) stmt -> . RETURN exp SEMICOLON
    (36) stmt -> . exp SEMICOLON
    (37) stmt -> . block
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (43) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (27) block -> . LCB varlist stmtlist RCB
    (28) block -> . LCB varlist RCB
    (29) block -> . LCB stmtlist RCB
    (30) block -> . LCB RCB
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    RCB             shift and go to state 94
    RETURN          shift and go to state 58
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    LCB             shift and go to state 29
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    stmt                           shift and go to state 95
    exp                            shift and go to state 59
    block                          shift and go to state 60
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 54

    (30) block -> LCB RCB .

    $end            reduce using rule 30 (block -> LCB RCB .)
    RCB             reduce using rule 30 (block -> LCB RCB .)
    RETURN          reduce using rule 30 (block -> LCB RCB .)
    WHILE           reduce using rule 30 (block -> LCB RCB .)
    FOR             reduce using rule 30 (block -> LCB RCB .)
    IF              reduce using rule 30 (block -> LCB RCB .)
    PRINT           reduce using rule 30 (block -> LCB RCB .)
    ID              reduce using rule 30 (block -> LCB RCB .)
    LRB             reduce using rule 30 (block -> LCB RCB .)
    SUB             reduce using rule 30 (block -> LCB RCB .)
    NOT             reduce using rule 30 (block -> LCB RCB .)
    LCB             reduce using rule 30 (block -> LCB RCB .)
    INTEGERNUMBER   reduce using rule 30 (block -> LCB RCB .)
    FLOATNUMBER     reduce using rule 30 (block -> LCB RCB .)
    TRUE            reduce using rule 30 (block -> LCB RCB .)
    FALSE           reduce using rule 30 (block -> LCB RCB .)
    MAIN            reduce using rule 30 (block -> LCB RCB .)
    VOID            reduce using rule 30 (block -> LCB RCB .)
    INTEGER         reduce using rule 30 (block -> LCB RCB .)
    FLOAT           reduce using rule 30 (block -> LCB RCB .)
    BOOLEAN         reduce using rule 30 (block -> LCB RCB .)
    ELSE            reduce using rule 30 (block -> LCB RCB .)
    ELIF            reduce using rule 30 (block -> LCB RCB .)


state 55

    (25) varlist -> vardec .

    RCB             reduce using rule 25 (varlist -> vardec .)
    RETURN          reduce using rule 25 (varlist -> vardec .)
    WHILE           reduce using rule 25 (varlist -> vardec .)
    FOR             reduce using rule 25 (varlist -> vardec .)
    IF              reduce using rule 25 (varlist -> vardec .)
    PRINT           reduce using rule 25 (varlist -> vardec .)
    INTEGER         reduce using rule 25 (varlist -> vardec .)
    FLOAT           reduce using rule 25 (varlist -> vardec .)
    BOOLEAN         reduce using rule 25 (varlist -> vardec .)
    ID              reduce using rule 25 (varlist -> vardec .)
    LRB             reduce using rule 25 (varlist -> vardec .)
    SUB             reduce using rule 25 (varlist -> vardec .)
    NOT             reduce using rule 25 (varlist -> vardec .)
    LCB             reduce using rule 25 (varlist -> vardec .)
    INTEGERNUMBER   reduce using rule 25 (varlist -> vardec .)
    FLOATNUMBER     reduce using rule 25 (varlist -> vardec .)
    TRUE            reduce using rule 25 (varlist -> vardec .)
    FALSE           reduce using rule 25 (varlist -> vardec .)


state 56

    (31) stmtlist -> stmt .

    RCB             reduce using rule 31 (stmtlist -> stmt .)
    RETURN          reduce using rule 31 (stmtlist -> stmt .)
    WHILE           reduce using rule 31 (stmtlist -> stmt .)
    FOR             reduce using rule 31 (stmtlist -> stmt .)
    IF              reduce using rule 31 (stmtlist -> stmt .)
    PRINT           reduce using rule 31 (stmtlist -> stmt .)
    ID              reduce using rule 31 (stmtlist -> stmt .)
    LRB             reduce using rule 31 (stmtlist -> stmt .)
    SUB             reduce using rule 31 (stmtlist -> stmt .)
    NOT             reduce using rule 31 (stmtlist -> stmt .)
    LCB             reduce using rule 31 (stmtlist -> stmt .)
    INTEGERNUMBER   reduce using rule 31 (stmtlist -> stmt .)
    FLOATNUMBER     reduce using rule 31 (stmtlist -> stmt .)
    TRUE            reduce using rule 31 (stmtlist -> stmt .)
    FALSE           reduce using rule 31 (stmtlist -> stmt .)


state 57

    (15) vardec -> type . idlist SEMICOLON
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    ID              shift and go to state 31

    idlist                         shift and go to state 15
    iddec                          shift and go to state 17

state 58

    (35) stmt -> RETURN . exp SEMICOLON
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 96
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 59

    (36) stmt -> exp . SEMICOLON
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    SEMICOLON       shift and go to state 97
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    OR              shift and go to state 77
    AND             shift and go to state 78
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84


state 60

    (37) stmt -> block .

    RCB             reduce using rule 37 (stmt -> block .)
    RETURN          reduce using rule 37 (stmt -> block .)
    WHILE           reduce using rule 37 (stmt -> block .)
    FOR             reduce using rule 37 (stmt -> block .)
    IF              reduce using rule 37 (stmt -> block .)
    PRINT           reduce using rule 37 (stmt -> block .)
    ID              reduce using rule 37 (stmt -> block .)
    LRB             reduce using rule 37 (stmt -> block .)
    SUB             reduce using rule 37 (stmt -> block .)
    NOT             reduce using rule 37 (stmt -> block .)
    LCB             reduce using rule 37 (stmt -> block .)
    INTEGERNUMBER   reduce using rule 37 (stmt -> block .)
    FLOATNUMBER     reduce using rule 37 (stmt -> block .)
    TRUE            reduce using rule 37 (stmt -> block .)
    FALSE           reduce using rule 37 (stmt -> block .)
    ELSE            reduce using rule 37 (stmt -> block .)
    ELIF            reduce using rule 37 (stmt -> block .)


state 61

    (38) stmt -> WHILE . LRB exp RRB stmt

    LRB             shift and go to state 98


state 62

    (39) stmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB stmt

    LRB             shift and go to state 99


state 63

    (40) stmt -> IF . LRB exp RRB stmt elseiflist
    (41) stmt -> IF . LRB exp RRB stmt
    (42) stmt -> IF . LRB exp RRB stmt elseiflist ELSE stmt
    (43) stmt -> IF . LRB exp RRB stmt ELSE stmt

    LRB             shift and go to state 100


state 64

    (44) stmt -> PRINT . LRB ID RRB SEMICOLON

    LRB             shift and go to state 101


state 65

    (23) paramdec -> type ID .
    (24) paramdec -> type ID . LSB RSB

    COMMA           reduce using rule 23 (paramdec -> type ID .)
    RRB             reduce using rule 23 (paramdec -> type ID .)
    LSB             shift and go to state 102


state 66

    (16) funcdec -> type ID LRB paramdecs RRB . block
    (27) block -> . LCB varlist stmtlist RCB
    (28) block -> . LCB varlist RCB
    (29) block -> . LCB stmtlist RCB
    (30) block -> . LCB RCB

    LCB             shift and go to state 29

    block                          shift and go to state 103

state 67

    (17) funcdec -> type ID LRB RRB block .

    MAIN            reduce using rule 17 (funcdec -> type ID LRB RRB block .)
    VOID            reduce using rule 17 (funcdec -> type ID LRB RRB block .)
    INTEGER         reduce using rule 17 (funcdec -> type ID LRB RRB block .)
    FLOAT           reduce using rule 17 (funcdec -> type ID LRB RRB block .)
    BOOLEAN         reduce using rule 17 (funcdec -> type ID LRB RRB block .)


state 68

    (22) paramdecslist -> paramdecslist COMMA . paramdec
    (23) paramdec -> . type ID
    (24) paramdec -> . type ID LSB RSB
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 9
    FLOAT           shift and go to state 10
    BOOLEAN         shift and go to state 11

    paramdec                       shift and go to state 104
    type                           shift and go to state 32

state 69

    (57) exp -> ID LRB . explist RRB
    (59) exp -> ID LRB . RRB
    (72) explist -> . exp
    (73) explist -> . explist COMMA exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    RRB             shift and go to state 106
    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    explist                        shift and go to state 105
    exp                            shift and go to state 107
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 70

    (34) lvalue -> ID LSB . exp RSB
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 108
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 71

    (11) iddec -> ID LSB exp RSB .

    SEMICOLON       reduce using rule 11 (iddec -> ID LSB exp RSB .)
    COMMA           reduce using rule 11 (iddec -> ID LSB exp RSB .)


state 72

    (48) exp -> exp SUM . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 109
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 73

    (49) exp -> exp SUB . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 110
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 74

    (50) exp -> exp MUL . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 111
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 75

    (51) exp -> exp DIV . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 112
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 76

    (52) exp -> exp MOD . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 113
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 77

    (53) exp -> exp OR . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 114
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 78

    (54) exp -> exp AND . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 115
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 79

    (66) exp -> exp GT . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 116
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 80

    (67) exp -> exp LT . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 117
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 81

    (68) exp -> exp NE . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 118
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 82

    (69) exp -> exp EQ . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 119
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 83

    (70) exp -> exp LE . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 120
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 84

    (71) exp -> exp GE . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 121
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 85

    (47) exp -> lvalue ASSIGN . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    lvalue                         shift and go to state 39
    exp                            shift and go to state 122
    const                          shift and go to state 41

state 86

    (60) exp -> SUB exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RSB             reduce using rule 60 (exp -> SUB exp .)
    SUM             reduce using rule 60 (exp -> SUB exp .)
    SUB             reduce using rule 60 (exp -> SUB exp .)
    OR              reduce using rule 60 (exp -> SUB exp .)
    AND             reduce using rule 60 (exp -> SUB exp .)
    GT              reduce using rule 60 (exp -> SUB exp .)
    LT              reduce using rule 60 (exp -> SUB exp .)
    NE              reduce using rule 60 (exp -> SUB exp .)
    EQ              reduce using rule 60 (exp -> SUB exp .)
    LE              reduce using rule 60 (exp -> SUB exp .)
    GE              reduce using rule 60 (exp -> SUB exp .)
    SEMICOLON       reduce using rule 60 (exp -> SUB exp .)
    COMMA           reduce using rule 60 (exp -> SUB exp .)
    RRB             reduce using rule 60 (exp -> SUB exp .)
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76

  ! MUL             [ reduce using rule 60 (exp -> SUB exp .) ]
  ! DIV             [ reduce using rule 60 (exp -> SUB exp .) ]
  ! MOD             [ reduce using rule 60 (exp -> SUB exp .) ]
  ! SUM             [ shift and go to state 72 ]
  ! SUB             [ shift and go to state 73 ]
  ! OR              [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! GT              [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! LE              [ shift and go to state 83 ]
  ! GE              [ shift and go to state 84 ]


state 87

    (58) exp -> LRB exp . RRB
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RRB             shift and go to state 123
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    OR              shift and go to state 77
    AND             shift and go to state 78
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84


state 88

    (61) exp -> NOT exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RSB             reduce using rule 61 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 61 (exp -> NOT exp .)
    COMMA           reduce using rule 61 (exp -> NOT exp .)
    RRB             reduce using rule 61 (exp -> NOT exp .)
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    OR              shift and go to state 77
    AND             shift and go to state 78
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84

  ! SUM             [ reduce using rule 61 (exp -> NOT exp .) ]
  ! SUB             [ reduce using rule 61 (exp -> NOT exp .) ]
  ! MUL             [ reduce using rule 61 (exp -> NOT exp .) ]
  ! DIV             [ reduce using rule 61 (exp -> NOT exp .) ]
  ! MOD             [ reduce using rule 61 (exp -> NOT exp .) ]
  ! OR              [ reduce using rule 61 (exp -> NOT exp .) ]
  ! AND             [ reduce using rule 61 (exp -> NOT exp .) ]
  ! GT              [ reduce using rule 61 (exp -> NOT exp .) ]
  ! LT              [ reduce using rule 61 (exp -> NOT exp .) ]
  ! NE              [ reduce using rule 61 (exp -> NOT exp .) ]
  ! EQ              [ reduce using rule 61 (exp -> NOT exp .) ]
  ! LE              [ reduce using rule 61 (exp -> NOT exp .) ]
  ! GE              [ reduce using rule 61 (exp -> NOT exp .) ]


state 89

    (18) funcdec -> VOID ID LRB paramdecs RRB . block
    (27) block -> . LCB varlist stmtlist RCB
    (28) block -> . LCB varlist RCB
    (29) block -> . LCB stmtlist RCB
    (30) block -> . LCB RCB

    LCB             shift and go to state 29

    block                          shift and go to state 124

state 90

    (19) funcdec -> VOID ID LRB RRB block .

    MAIN            reduce using rule 19 (funcdec -> VOID ID LRB RRB block .)
    VOID            reduce using rule 19 (funcdec -> VOID ID LRB RRB block .)
    INTEGER         reduce using rule 19 (funcdec -> VOID ID LRB RRB block .)
    FLOAT           reduce using rule 19 (funcdec -> VOID ID LRB RRB block .)
    BOOLEAN         reduce using rule 19 (funcdec -> VOID ID LRB RRB block .)


state 91

    (27) block -> LCB varlist stmtlist . RCB
    (32) stmtlist -> stmtlist . stmt
    (35) stmt -> . RETURN exp SEMICOLON
    (36) stmt -> . exp SEMICOLON
    (37) stmt -> . block
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (43) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (27) block -> . LCB varlist stmtlist RCB
    (28) block -> . LCB varlist RCB
    (29) block -> . LCB stmtlist RCB
    (30) block -> . LCB RCB
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    RCB             shift and go to state 125
    RETURN          shift and go to state 58
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    LCB             shift and go to state 29
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    stmt                           shift and go to state 95
    exp                            shift and go to state 59
    block                          shift and go to state 60
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 92

    (28) block -> LCB varlist RCB .

    $end            reduce using rule 28 (block -> LCB varlist RCB .)
    RCB             reduce using rule 28 (block -> LCB varlist RCB .)
    RETURN          reduce using rule 28 (block -> LCB varlist RCB .)
    WHILE           reduce using rule 28 (block -> LCB varlist RCB .)
    FOR             reduce using rule 28 (block -> LCB varlist RCB .)
    IF              reduce using rule 28 (block -> LCB varlist RCB .)
    PRINT           reduce using rule 28 (block -> LCB varlist RCB .)
    ID              reduce using rule 28 (block -> LCB varlist RCB .)
    LRB             reduce using rule 28 (block -> LCB varlist RCB .)
    SUB             reduce using rule 28 (block -> LCB varlist RCB .)
    NOT             reduce using rule 28 (block -> LCB varlist RCB .)
    LCB             reduce using rule 28 (block -> LCB varlist RCB .)
    INTEGERNUMBER   reduce using rule 28 (block -> LCB varlist RCB .)
    FLOATNUMBER     reduce using rule 28 (block -> LCB varlist RCB .)
    TRUE            reduce using rule 28 (block -> LCB varlist RCB .)
    FALSE           reduce using rule 28 (block -> LCB varlist RCB .)
    MAIN            reduce using rule 28 (block -> LCB varlist RCB .)
    VOID            reduce using rule 28 (block -> LCB varlist RCB .)
    INTEGER         reduce using rule 28 (block -> LCB varlist RCB .)
    FLOAT           reduce using rule 28 (block -> LCB varlist RCB .)
    BOOLEAN         reduce using rule 28 (block -> LCB varlist RCB .)
    ELSE            reduce using rule 28 (block -> LCB varlist RCB .)
    ELIF            reduce using rule 28 (block -> LCB varlist RCB .)


state 93

    (26) varlist -> varlist vardec .

    RCB             reduce using rule 26 (varlist -> varlist vardec .)
    RETURN          reduce using rule 26 (varlist -> varlist vardec .)
    WHILE           reduce using rule 26 (varlist -> varlist vardec .)
    FOR             reduce using rule 26 (varlist -> varlist vardec .)
    IF              reduce using rule 26 (varlist -> varlist vardec .)
    PRINT           reduce using rule 26 (varlist -> varlist vardec .)
    INTEGER         reduce using rule 26 (varlist -> varlist vardec .)
    FLOAT           reduce using rule 26 (varlist -> varlist vardec .)
    BOOLEAN         reduce using rule 26 (varlist -> varlist vardec .)
    ID              reduce using rule 26 (varlist -> varlist vardec .)
    LRB             reduce using rule 26 (varlist -> varlist vardec .)
    SUB             reduce using rule 26 (varlist -> varlist vardec .)
    NOT             reduce using rule 26 (varlist -> varlist vardec .)
    LCB             reduce using rule 26 (varlist -> varlist vardec .)
    INTEGERNUMBER   reduce using rule 26 (varlist -> varlist vardec .)
    FLOATNUMBER     reduce using rule 26 (varlist -> varlist vardec .)
    TRUE            reduce using rule 26 (varlist -> varlist vardec .)
    FALSE           reduce using rule 26 (varlist -> varlist vardec .)


state 94

    (29) block -> LCB stmtlist RCB .

    $end            reduce using rule 29 (block -> LCB stmtlist RCB .)
    RCB             reduce using rule 29 (block -> LCB stmtlist RCB .)
    RETURN          reduce using rule 29 (block -> LCB stmtlist RCB .)
    WHILE           reduce using rule 29 (block -> LCB stmtlist RCB .)
    FOR             reduce using rule 29 (block -> LCB stmtlist RCB .)
    IF              reduce using rule 29 (block -> LCB stmtlist RCB .)
    PRINT           reduce using rule 29 (block -> LCB stmtlist RCB .)
    ID              reduce using rule 29 (block -> LCB stmtlist RCB .)
    LRB             reduce using rule 29 (block -> LCB stmtlist RCB .)
    SUB             reduce using rule 29 (block -> LCB stmtlist RCB .)
    NOT             reduce using rule 29 (block -> LCB stmtlist RCB .)
    LCB             reduce using rule 29 (block -> LCB stmtlist RCB .)
    INTEGERNUMBER   reduce using rule 29 (block -> LCB stmtlist RCB .)
    FLOATNUMBER     reduce using rule 29 (block -> LCB stmtlist RCB .)
    TRUE            reduce using rule 29 (block -> LCB stmtlist RCB .)
    FALSE           reduce using rule 29 (block -> LCB stmtlist RCB .)
    MAIN            reduce using rule 29 (block -> LCB stmtlist RCB .)
    VOID            reduce using rule 29 (block -> LCB stmtlist RCB .)
    INTEGER         reduce using rule 29 (block -> LCB stmtlist RCB .)
    FLOAT           reduce using rule 29 (block -> LCB stmtlist RCB .)
    BOOLEAN         reduce using rule 29 (block -> LCB stmtlist RCB .)
    ELSE            reduce using rule 29 (block -> LCB stmtlist RCB .)
    ELIF            reduce using rule 29 (block -> LCB stmtlist RCB .)


state 95

    (32) stmtlist -> stmtlist stmt .

    RCB             reduce using rule 32 (stmtlist -> stmtlist stmt .)
    RETURN          reduce using rule 32 (stmtlist -> stmtlist stmt .)
    WHILE           reduce using rule 32 (stmtlist -> stmtlist stmt .)
    FOR             reduce using rule 32 (stmtlist -> stmtlist stmt .)
    IF              reduce using rule 32 (stmtlist -> stmtlist stmt .)
    PRINT           reduce using rule 32 (stmtlist -> stmtlist stmt .)
    ID              reduce using rule 32 (stmtlist -> stmtlist stmt .)
    LRB             reduce using rule 32 (stmtlist -> stmtlist stmt .)
    SUB             reduce using rule 32 (stmtlist -> stmtlist stmt .)
    NOT             reduce using rule 32 (stmtlist -> stmtlist stmt .)
    LCB             reduce using rule 32 (stmtlist -> stmtlist stmt .)
    INTEGERNUMBER   reduce using rule 32 (stmtlist -> stmtlist stmt .)
    FLOATNUMBER     reduce using rule 32 (stmtlist -> stmtlist stmt .)
    TRUE            reduce using rule 32 (stmtlist -> stmtlist stmt .)
    FALSE           reduce using rule 32 (stmtlist -> stmtlist stmt .)


state 96

    (35) stmt -> RETURN exp . SEMICOLON
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    SEMICOLON       shift and go to state 126
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    OR              shift and go to state 77
    AND             shift and go to state 78
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84


state 97

    (36) stmt -> exp SEMICOLON .

    RCB             reduce using rule 36 (stmt -> exp SEMICOLON .)
    RETURN          reduce using rule 36 (stmt -> exp SEMICOLON .)
    WHILE           reduce using rule 36 (stmt -> exp SEMICOLON .)
    FOR             reduce using rule 36 (stmt -> exp SEMICOLON .)
    IF              reduce using rule 36 (stmt -> exp SEMICOLON .)
    PRINT           reduce using rule 36 (stmt -> exp SEMICOLON .)
    ID              reduce using rule 36 (stmt -> exp SEMICOLON .)
    LRB             reduce using rule 36 (stmt -> exp SEMICOLON .)
    SUB             reduce using rule 36 (stmt -> exp SEMICOLON .)
    NOT             reduce using rule 36 (stmt -> exp SEMICOLON .)
    LCB             reduce using rule 36 (stmt -> exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 36 (stmt -> exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 36 (stmt -> exp SEMICOLON .)
    TRUE            reduce using rule 36 (stmt -> exp SEMICOLON .)
    FALSE           reduce using rule 36 (stmt -> exp SEMICOLON .)
    ELSE            reduce using rule 36 (stmt -> exp SEMICOLON .)
    ELIF            reduce using rule 36 (stmt -> exp SEMICOLON .)


state 98

    (38) stmt -> WHILE LRB . exp RRB stmt
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 127
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 99

    (39) stmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB stmt
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 128
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 100

    (40) stmt -> IF LRB . exp RRB stmt elseiflist
    (41) stmt -> IF LRB . exp RRB stmt
    (42) stmt -> IF LRB . exp RRB stmt elseiflist ELSE stmt
    (43) stmt -> IF LRB . exp RRB stmt ELSE stmt
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 129
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 101

    (44) stmt -> PRINT LRB . ID RRB SEMICOLON

    ID              shift and go to state 130


state 102

    (24) paramdec -> type ID LSB . RSB

    RSB             shift and go to state 131


state 103

    (16) funcdec -> type ID LRB paramdecs RRB block .

    MAIN            reduce using rule 16 (funcdec -> type ID LRB paramdecs RRB block .)
    VOID            reduce using rule 16 (funcdec -> type ID LRB paramdecs RRB block .)
    INTEGER         reduce using rule 16 (funcdec -> type ID LRB paramdecs RRB block .)
    FLOAT           reduce using rule 16 (funcdec -> type ID LRB paramdecs RRB block .)
    BOOLEAN         reduce using rule 16 (funcdec -> type ID LRB paramdecs RRB block .)


state 104

    (22) paramdecslist -> paramdecslist COMMA paramdec .

    COMMA           reduce using rule 22 (paramdecslist -> paramdecslist COMMA paramdec .)
    RRB             reduce using rule 22 (paramdecslist -> paramdecslist COMMA paramdec .)


state 105

    (57) exp -> ID LRB explist . RRB
    (73) explist -> explist . COMMA exp

    RRB             shift and go to state 132
    COMMA           shift and go to state 133


state 106

    (59) exp -> ID LRB RRB .

    RSB             reduce using rule 59 (exp -> ID LRB RRB .)
    SUM             reduce using rule 59 (exp -> ID LRB RRB .)
    SUB             reduce using rule 59 (exp -> ID LRB RRB .)
    MUL             reduce using rule 59 (exp -> ID LRB RRB .)
    DIV             reduce using rule 59 (exp -> ID LRB RRB .)
    MOD             reduce using rule 59 (exp -> ID LRB RRB .)
    OR              reduce using rule 59 (exp -> ID LRB RRB .)
    AND             reduce using rule 59 (exp -> ID LRB RRB .)
    GT              reduce using rule 59 (exp -> ID LRB RRB .)
    LT              reduce using rule 59 (exp -> ID LRB RRB .)
    NE              reduce using rule 59 (exp -> ID LRB RRB .)
    EQ              reduce using rule 59 (exp -> ID LRB RRB .)
    LE              reduce using rule 59 (exp -> ID LRB RRB .)
    GE              reduce using rule 59 (exp -> ID LRB RRB .)
    SEMICOLON       reduce using rule 59 (exp -> ID LRB RRB .)
    COMMA           reduce using rule 59 (exp -> ID LRB RRB .)
    RRB             reduce using rule 59 (exp -> ID LRB RRB .)


state 107

    (72) explist -> exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RRB             reduce using rule 72 (explist -> exp .)
    COMMA           reduce using rule 72 (explist -> exp .)
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    OR              shift and go to state 77
    AND             shift and go to state 78
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84


state 108

    (34) lvalue -> ID LSB exp . RSB
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RSB             shift and go to state 134
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    OR              shift and go to state 77
    AND             shift and go to state 78
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84


state 109

    (48) exp -> exp SUM exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RSB             reduce using rule 48 (exp -> exp SUM exp .)
    SUM             reduce using rule 48 (exp -> exp SUM exp .)
    SUB             reduce using rule 48 (exp -> exp SUM exp .)
    OR              reduce using rule 48 (exp -> exp SUM exp .)
    AND             reduce using rule 48 (exp -> exp SUM exp .)
    GT              reduce using rule 48 (exp -> exp SUM exp .)
    LT              reduce using rule 48 (exp -> exp SUM exp .)
    NE              reduce using rule 48 (exp -> exp SUM exp .)
    EQ              reduce using rule 48 (exp -> exp SUM exp .)
    LE              reduce using rule 48 (exp -> exp SUM exp .)
    GE              reduce using rule 48 (exp -> exp SUM exp .)
    SEMICOLON       reduce using rule 48 (exp -> exp SUM exp .)
    COMMA           reduce using rule 48 (exp -> exp SUM exp .)
    RRB             reduce using rule 48 (exp -> exp SUM exp .)
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76

  ! MUL             [ reduce using rule 48 (exp -> exp SUM exp .) ]
  ! DIV             [ reduce using rule 48 (exp -> exp SUM exp .) ]
  ! MOD             [ reduce using rule 48 (exp -> exp SUM exp .) ]
  ! SUM             [ shift and go to state 72 ]
  ! SUB             [ shift and go to state 73 ]
  ! OR              [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! GT              [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! LE              [ shift and go to state 83 ]
  ! GE              [ shift and go to state 84 ]


state 110

    (49) exp -> exp SUB exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RSB             reduce using rule 49 (exp -> exp SUB exp .)
    SUM             reduce using rule 49 (exp -> exp SUB exp .)
    SUB             reduce using rule 49 (exp -> exp SUB exp .)
    OR              reduce using rule 49 (exp -> exp SUB exp .)
    AND             reduce using rule 49 (exp -> exp SUB exp .)
    GT              reduce using rule 49 (exp -> exp SUB exp .)
    LT              reduce using rule 49 (exp -> exp SUB exp .)
    NE              reduce using rule 49 (exp -> exp SUB exp .)
    EQ              reduce using rule 49 (exp -> exp SUB exp .)
    LE              reduce using rule 49 (exp -> exp SUB exp .)
    GE              reduce using rule 49 (exp -> exp SUB exp .)
    SEMICOLON       reduce using rule 49 (exp -> exp SUB exp .)
    COMMA           reduce using rule 49 (exp -> exp SUB exp .)
    RRB             reduce using rule 49 (exp -> exp SUB exp .)
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76

  ! MUL             [ reduce using rule 49 (exp -> exp SUB exp .) ]
  ! DIV             [ reduce using rule 49 (exp -> exp SUB exp .) ]
  ! MOD             [ reduce using rule 49 (exp -> exp SUB exp .) ]
  ! SUM             [ shift and go to state 72 ]
  ! SUB             [ shift and go to state 73 ]
  ! OR              [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! GT              [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! LE              [ shift and go to state 83 ]
  ! GE              [ shift and go to state 84 ]


state 111

    (50) exp -> exp MUL exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RSB             reduce using rule 50 (exp -> exp MUL exp .)
    SUM             reduce using rule 50 (exp -> exp MUL exp .)
    SUB             reduce using rule 50 (exp -> exp MUL exp .)
    MUL             reduce using rule 50 (exp -> exp MUL exp .)
    DIV             reduce using rule 50 (exp -> exp MUL exp .)
    MOD             reduce using rule 50 (exp -> exp MUL exp .)
    OR              reduce using rule 50 (exp -> exp MUL exp .)
    AND             reduce using rule 50 (exp -> exp MUL exp .)
    GT              reduce using rule 50 (exp -> exp MUL exp .)
    LT              reduce using rule 50 (exp -> exp MUL exp .)
    NE              reduce using rule 50 (exp -> exp MUL exp .)
    EQ              reduce using rule 50 (exp -> exp MUL exp .)
    LE              reduce using rule 50 (exp -> exp MUL exp .)
    GE              reduce using rule 50 (exp -> exp MUL exp .)
    SEMICOLON       reduce using rule 50 (exp -> exp MUL exp .)
    COMMA           reduce using rule 50 (exp -> exp MUL exp .)
    RRB             reduce using rule 50 (exp -> exp MUL exp .)

  ! SUM             [ shift and go to state 72 ]
  ! SUB             [ shift and go to state 73 ]
  ! MUL             [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! GT              [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! LE              [ shift and go to state 83 ]
  ! GE              [ shift and go to state 84 ]


state 112

    (51) exp -> exp DIV exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RSB             reduce using rule 51 (exp -> exp DIV exp .)
    SUM             reduce using rule 51 (exp -> exp DIV exp .)
    SUB             reduce using rule 51 (exp -> exp DIV exp .)
    MUL             reduce using rule 51 (exp -> exp DIV exp .)
    DIV             reduce using rule 51 (exp -> exp DIV exp .)
    MOD             reduce using rule 51 (exp -> exp DIV exp .)
    OR              reduce using rule 51 (exp -> exp DIV exp .)
    AND             reduce using rule 51 (exp -> exp DIV exp .)
    GT              reduce using rule 51 (exp -> exp DIV exp .)
    LT              reduce using rule 51 (exp -> exp DIV exp .)
    NE              reduce using rule 51 (exp -> exp DIV exp .)
    EQ              reduce using rule 51 (exp -> exp DIV exp .)
    LE              reduce using rule 51 (exp -> exp DIV exp .)
    GE              reduce using rule 51 (exp -> exp DIV exp .)
    SEMICOLON       reduce using rule 51 (exp -> exp DIV exp .)
    COMMA           reduce using rule 51 (exp -> exp DIV exp .)
    RRB             reduce using rule 51 (exp -> exp DIV exp .)

  ! SUM             [ shift and go to state 72 ]
  ! SUB             [ shift and go to state 73 ]
  ! MUL             [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! GT              [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! LE              [ shift and go to state 83 ]
  ! GE              [ shift and go to state 84 ]


state 113

    (52) exp -> exp MOD exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RSB             reduce using rule 52 (exp -> exp MOD exp .)
    SUM             reduce using rule 52 (exp -> exp MOD exp .)
    SUB             reduce using rule 52 (exp -> exp MOD exp .)
    MUL             reduce using rule 52 (exp -> exp MOD exp .)
    DIV             reduce using rule 52 (exp -> exp MOD exp .)
    MOD             reduce using rule 52 (exp -> exp MOD exp .)
    OR              reduce using rule 52 (exp -> exp MOD exp .)
    AND             reduce using rule 52 (exp -> exp MOD exp .)
    GT              reduce using rule 52 (exp -> exp MOD exp .)
    LT              reduce using rule 52 (exp -> exp MOD exp .)
    NE              reduce using rule 52 (exp -> exp MOD exp .)
    EQ              reduce using rule 52 (exp -> exp MOD exp .)
    LE              reduce using rule 52 (exp -> exp MOD exp .)
    GE              reduce using rule 52 (exp -> exp MOD exp .)
    SEMICOLON       reduce using rule 52 (exp -> exp MOD exp .)
    COMMA           reduce using rule 52 (exp -> exp MOD exp .)
    RRB             reduce using rule 52 (exp -> exp MOD exp .)

  ! SUM             [ shift and go to state 72 ]
  ! SUB             [ shift and go to state 73 ]
  ! MUL             [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! GT              [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! LE              [ shift and go to state 83 ]
  ! GE              [ shift and go to state 84 ]


state 114

    (53) exp -> exp OR exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RSB             reduce using rule 53 (exp -> exp OR exp .)
    OR              reduce using rule 53 (exp -> exp OR exp .)
    SEMICOLON       reduce using rule 53 (exp -> exp OR exp .)
    COMMA           reduce using rule 53 (exp -> exp OR exp .)
    RRB             reduce using rule 53 (exp -> exp OR exp .)
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    AND             shift and go to state 78
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84

  ! SUM             [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! SUB             [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! MUL             [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! DIV             [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! MOD             [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! GT              [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! LT              [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! NE              [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! EQ              [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! LE              [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! GE              [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 77 ]


state 115

    (54) exp -> exp AND exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RSB             reduce using rule 54 (exp -> exp AND exp .)
    OR              reduce using rule 54 (exp -> exp AND exp .)
    AND             reduce using rule 54 (exp -> exp AND exp .)
    SEMICOLON       reduce using rule 54 (exp -> exp AND exp .)
    COMMA           reduce using rule 54 (exp -> exp AND exp .)
    RRB             reduce using rule 54 (exp -> exp AND exp .)
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84

  ! SUM             [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! SUB             [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! MUL             [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! DIV             [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! MOD             [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! GT              [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! LT              [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! NE              [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! EQ              [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! LE              [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! GE              [ reduce using rule 54 (exp -> exp AND exp .) ]
  ! OR              [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]


state 116

    (66) exp -> exp GT exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RSB             reduce using rule 66 (exp -> exp GT exp .)
    OR              reduce using rule 66 (exp -> exp GT exp .)
    AND             reduce using rule 66 (exp -> exp GT exp .)
    GT              reduce using rule 66 (exp -> exp GT exp .)
    LT              reduce using rule 66 (exp -> exp GT exp .)
    SEMICOLON       reduce using rule 66 (exp -> exp GT exp .)
    COMMA           reduce using rule 66 (exp -> exp GT exp .)
    RRB             reduce using rule 66 (exp -> exp GT exp .)
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84

  ! SUM             [ reduce using rule 66 (exp -> exp GT exp .) ]
  ! SUB             [ reduce using rule 66 (exp -> exp GT exp .) ]
  ! MUL             [ reduce using rule 66 (exp -> exp GT exp .) ]
  ! DIV             [ reduce using rule 66 (exp -> exp GT exp .) ]
  ! MOD             [ reduce using rule 66 (exp -> exp GT exp .) ]
  ! NE              [ reduce using rule 66 (exp -> exp GT exp .) ]
  ! EQ              [ reduce using rule 66 (exp -> exp GT exp .) ]
  ! LE              [ reduce using rule 66 (exp -> exp GT exp .) ]
  ! GE              [ reduce using rule 66 (exp -> exp GT exp .) ]
  ! OR              [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! GT              [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]


state 117

    (67) exp -> exp LT exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RSB             reduce using rule 67 (exp -> exp LT exp .)
    OR              reduce using rule 67 (exp -> exp LT exp .)
    AND             reduce using rule 67 (exp -> exp LT exp .)
    LT              reduce using rule 67 (exp -> exp LT exp .)
    SEMICOLON       reduce using rule 67 (exp -> exp LT exp .)
    COMMA           reduce using rule 67 (exp -> exp LT exp .)
    RRB             reduce using rule 67 (exp -> exp LT exp .)
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    GT              shift and go to state 79
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84

  ! SUM             [ reduce using rule 67 (exp -> exp LT exp .) ]
  ! SUB             [ reduce using rule 67 (exp -> exp LT exp .) ]
  ! MUL             [ reduce using rule 67 (exp -> exp LT exp .) ]
  ! DIV             [ reduce using rule 67 (exp -> exp LT exp .) ]
  ! MOD             [ reduce using rule 67 (exp -> exp LT exp .) ]
  ! GT              [ reduce using rule 67 (exp -> exp LT exp .) ]
  ! NE              [ reduce using rule 67 (exp -> exp LT exp .) ]
  ! EQ              [ reduce using rule 67 (exp -> exp LT exp .) ]
  ! LE              [ reduce using rule 67 (exp -> exp LT exp .) ]
  ! GE              [ reduce using rule 67 (exp -> exp LT exp .) ]
  ! OR              [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! LT              [ shift and go to state 80 ]


state 118

    (68) exp -> exp NE exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RSB             reduce using rule 68 (exp -> exp NE exp .)
    OR              reduce using rule 68 (exp -> exp NE exp .)
    AND             reduce using rule 68 (exp -> exp NE exp .)
    GT              reduce using rule 68 (exp -> exp NE exp .)
    LT              reduce using rule 68 (exp -> exp NE exp .)
    NE              reduce using rule 68 (exp -> exp NE exp .)
    GE              reduce using rule 68 (exp -> exp NE exp .)
    SEMICOLON       reduce using rule 68 (exp -> exp NE exp .)
    COMMA           reduce using rule 68 (exp -> exp NE exp .)
    RRB             reduce using rule 68 (exp -> exp NE exp .)
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    EQ              shift and go to state 82
    LE              shift and go to state 83

  ! SUM             [ reduce using rule 68 (exp -> exp NE exp .) ]
  ! SUB             [ reduce using rule 68 (exp -> exp NE exp .) ]
  ! MUL             [ reduce using rule 68 (exp -> exp NE exp .) ]
  ! DIV             [ reduce using rule 68 (exp -> exp NE exp .) ]
  ! MOD             [ reduce using rule 68 (exp -> exp NE exp .) ]
  ! EQ              [ reduce using rule 68 (exp -> exp NE exp .) ]
  ! LE              [ reduce using rule 68 (exp -> exp NE exp .) ]
  ! OR              [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! GT              [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 81 ]
  ! GE              [ shift and go to state 84 ]


state 119

    (69) exp -> exp EQ exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RSB             reduce using rule 69 (exp -> exp EQ exp .)
    OR              reduce using rule 69 (exp -> exp EQ exp .)
    AND             reduce using rule 69 (exp -> exp EQ exp .)
    GT              reduce using rule 69 (exp -> exp EQ exp .)
    LT              reduce using rule 69 (exp -> exp EQ exp .)
    NE              reduce using rule 69 (exp -> exp EQ exp .)
    EQ              reduce using rule 69 (exp -> exp EQ exp .)
    GE              reduce using rule 69 (exp -> exp EQ exp .)
    SEMICOLON       reduce using rule 69 (exp -> exp EQ exp .)
    COMMA           reduce using rule 69 (exp -> exp EQ exp .)
    RRB             reduce using rule 69 (exp -> exp EQ exp .)
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    LE              shift and go to state 83

  ! SUM             [ reduce using rule 69 (exp -> exp EQ exp .) ]
  ! SUB             [ reduce using rule 69 (exp -> exp EQ exp .) ]
  ! MUL             [ reduce using rule 69 (exp -> exp EQ exp .) ]
  ! DIV             [ reduce using rule 69 (exp -> exp EQ exp .) ]
  ! MOD             [ reduce using rule 69 (exp -> exp EQ exp .) ]
  ! LE              [ reduce using rule 69 (exp -> exp EQ exp .) ]
  ! OR              [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! GT              [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! GE              [ shift and go to state 84 ]


state 120

    (70) exp -> exp LE exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RSB             reduce using rule 70 (exp -> exp LE exp .)
    OR              reduce using rule 70 (exp -> exp LE exp .)
    AND             reduce using rule 70 (exp -> exp LE exp .)
    GT              reduce using rule 70 (exp -> exp LE exp .)
    LT              reduce using rule 70 (exp -> exp LE exp .)
    NE              reduce using rule 70 (exp -> exp LE exp .)
    EQ              reduce using rule 70 (exp -> exp LE exp .)
    LE              reduce using rule 70 (exp -> exp LE exp .)
    GE              reduce using rule 70 (exp -> exp LE exp .)
    SEMICOLON       reduce using rule 70 (exp -> exp LE exp .)
    COMMA           reduce using rule 70 (exp -> exp LE exp .)
    RRB             reduce using rule 70 (exp -> exp LE exp .)
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76

  ! SUM             [ reduce using rule 70 (exp -> exp LE exp .) ]
  ! SUB             [ reduce using rule 70 (exp -> exp LE exp .) ]
  ! MUL             [ reduce using rule 70 (exp -> exp LE exp .) ]
  ! DIV             [ reduce using rule 70 (exp -> exp LE exp .) ]
  ! MOD             [ reduce using rule 70 (exp -> exp LE exp .) ]
  ! OR              [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! GT              [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]
  ! LE              [ shift and go to state 83 ]
  ! GE              [ shift and go to state 84 ]


state 121

    (71) exp -> exp GE exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RSB             reduce using rule 71 (exp -> exp GE exp .)
    OR              reduce using rule 71 (exp -> exp GE exp .)
    AND             reduce using rule 71 (exp -> exp GE exp .)
    GT              reduce using rule 71 (exp -> exp GE exp .)
    LT              reduce using rule 71 (exp -> exp GE exp .)
    GE              reduce using rule 71 (exp -> exp GE exp .)
    SEMICOLON       reduce using rule 71 (exp -> exp GE exp .)
    COMMA           reduce using rule 71 (exp -> exp GE exp .)
    RRB             reduce using rule 71 (exp -> exp GE exp .)
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83

  ! SUM             [ reduce using rule 71 (exp -> exp GE exp .) ]
  ! SUB             [ reduce using rule 71 (exp -> exp GE exp .) ]
  ! MUL             [ reduce using rule 71 (exp -> exp GE exp .) ]
  ! DIV             [ reduce using rule 71 (exp -> exp GE exp .) ]
  ! MOD             [ reduce using rule 71 (exp -> exp GE exp .) ]
  ! NE              [ reduce using rule 71 (exp -> exp GE exp .) ]
  ! EQ              [ reduce using rule 71 (exp -> exp GE exp .) ]
  ! LE              [ reduce using rule 71 (exp -> exp GE exp .) ]
  ! OR              [ shift and go to state 77 ]
  ! AND             [ shift and go to state 78 ]
  ! GT              [ shift and go to state 79 ]
  ! LT              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 84 ]


state 122

    (47) exp -> lvalue ASSIGN exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RSB             reduce using rule 47 (exp -> lvalue ASSIGN exp .)
    SEMICOLON       reduce using rule 47 (exp -> lvalue ASSIGN exp .)
    COMMA           reduce using rule 47 (exp -> lvalue ASSIGN exp .)
    RRB             reduce using rule 47 (exp -> lvalue ASSIGN exp .)
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    OR              shift and go to state 77
    AND             shift and go to state 78
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84

  ! SUM             [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! SUB             [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! MUL             [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! DIV             [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! MOD             [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! OR              [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! AND             [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! GT              [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! LT              [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! NE              [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! EQ              [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! LE              [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]
  ! GE              [ reduce using rule 47 (exp -> lvalue ASSIGN exp .) ]


state 123

    (58) exp -> LRB exp RRB .

    RSB             reduce using rule 58 (exp -> LRB exp RRB .)
    SUM             reduce using rule 58 (exp -> LRB exp RRB .)
    SUB             reduce using rule 58 (exp -> LRB exp RRB .)
    MUL             reduce using rule 58 (exp -> LRB exp RRB .)
    DIV             reduce using rule 58 (exp -> LRB exp RRB .)
    MOD             reduce using rule 58 (exp -> LRB exp RRB .)
    OR              reduce using rule 58 (exp -> LRB exp RRB .)
    AND             reduce using rule 58 (exp -> LRB exp RRB .)
    GT              reduce using rule 58 (exp -> LRB exp RRB .)
    LT              reduce using rule 58 (exp -> LRB exp RRB .)
    NE              reduce using rule 58 (exp -> LRB exp RRB .)
    EQ              reduce using rule 58 (exp -> LRB exp RRB .)
    LE              reduce using rule 58 (exp -> LRB exp RRB .)
    GE              reduce using rule 58 (exp -> LRB exp RRB .)
    SEMICOLON       reduce using rule 58 (exp -> LRB exp RRB .)
    COMMA           reduce using rule 58 (exp -> LRB exp RRB .)
    RRB             reduce using rule 58 (exp -> LRB exp RRB .)


state 124

    (18) funcdec -> VOID ID LRB paramdecs RRB block .

    MAIN            reduce using rule 18 (funcdec -> VOID ID LRB paramdecs RRB block .)
    VOID            reduce using rule 18 (funcdec -> VOID ID LRB paramdecs RRB block .)
    INTEGER         reduce using rule 18 (funcdec -> VOID ID LRB paramdecs RRB block .)
    FLOAT           reduce using rule 18 (funcdec -> VOID ID LRB paramdecs RRB block .)
    BOOLEAN         reduce using rule 18 (funcdec -> VOID ID LRB paramdecs RRB block .)


state 125

    (27) block -> LCB varlist stmtlist RCB .

    $end            reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    RCB             reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    RETURN          reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    WHILE           reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    FOR             reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    IF              reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    PRINT           reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    ID              reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    LRB             reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    SUB             reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    NOT             reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    LCB             reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    INTEGERNUMBER   reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    FLOATNUMBER     reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    TRUE            reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    FALSE           reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    MAIN            reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    VOID            reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    INTEGER         reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    FLOAT           reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    BOOLEAN         reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    ELSE            reduce using rule 27 (block -> LCB varlist stmtlist RCB .)
    ELIF            reduce using rule 27 (block -> LCB varlist stmtlist RCB .)


state 126

    (35) stmt -> RETURN exp SEMICOLON .

    RCB             reduce using rule 35 (stmt -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 35 (stmt -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 35 (stmt -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 35 (stmt -> RETURN exp SEMICOLON .)
    IF              reduce using rule 35 (stmt -> RETURN exp SEMICOLON .)
    PRINT           reduce using rule 35 (stmt -> RETURN exp SEMICOLON .)
    ID              reduce using rule 35 (stmt -> RETURN exp SEMICOLON .)
    LRB             reduce using rule 35 (stmt -> RETURN exp SEMICOLON .)
    SUB             reduce using rule 35 (stmt -> RETURN exp SEMICOLON .)
    NOT             reduce using rule 35 (stmt -> RETURN exp SEMICOLON .)
    LCB             reduce using rule 35 (stmt -> RETURN exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 35 (stmt -> RETURN exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 35 (stmt -> RETURN exp SEMICOLON .)
    TRUE            reduce using rule 35 (stmt -> RETURN exp SEMICOLON .)
    FALSE           reduce using rule 35 (stmt -> RETURN exp SEMICOLON .)
    ELSE            reduce using rule 35 (stmt -> RETURN exp SEMICOLON .)
    ELIF            reduce using rule 35 (stmt -> RETURN exp SEMICOLON .)


state 127

    (38) stmt -> WHILE LRB exp . RRB stmt
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RRB             shift and go to state 135
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    OR              shift and go to state 77
    AND             shift and go to state 78
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84


state 128

    (39) stmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB stmt
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    SEMICOLON       shift and go to state 136
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    OR              shift and go to state 77
    AND             shift and go to state 78
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84


state 129

    (40) stmt -> IF LRB exp . RRB stmt elseiflist
    (41) stmt -> IF LRB exp . RRB stmt
    (42) stmt -> IF LRB exp . RRB stmt elseiflist ELSE stmt
    (43) stmt -> IF LRB exp . RRB stmt ELSE stmt
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RRB             shift and go to state 137
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    OR              shift and go to state 77
    AND             shift and go to state 78
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84


state 130

    (44) stmt -> PRINT LRB ID . RRB SEMICOLON

    RRB             shift and go to state 138


state 131

    (24) paramdec -> type ID LSB RSB .

    COMMA           reduce using rule 24 (paramdec -> type ID LSB RSB .)
    RRB             reduce using rule 24 (paramdec -> type ID LSB RSB .)


state 132

    (57) exp -> ID LRB explist RRB .

    RSB             reduce using rule 57 (exp -> ID LRB explist RRB .)
    SUM             reduce using rule 57 (exp -> ID LRB explist RRB .)
    SUB             reduce using rule 57 (exp -> ID LRB explist RRB .)
    MUL             reduce using rule 57 (exp -> ID LRB explist RRB .)
    DIV             reduce using rule 57 (exp -> ID LRB explist RRB .)
    MOD             reduce using rule 57 (exp -> ID LRB explist RRB .)
    OR              reduce using rule 57 (exp -> ID LRB explist RRB .)
    AND             reduce using rule 57 (exp -> ID LRB explist RRB .)
    GT              reduce using rule 57 (exp -> ID LRB explist RRB .)
    LT              reduce using rule 57 (exp -> ID LRB explist RRB .)
    NE              reduce using rule 57 (exp -> ID LRB explist RRB .)
    EQ              reduce using rule 57 (exp -> ID LRB explist RRB .)
    LE              reduce using rule 57 (exp -> ID LRB explist RRB .)
    GE              reduce using rule 57 (exp -> ID LRB explist RRB .)
    SEMICOLON       reduce using rule 57 (exp -> ID LRB explist RRB .)
    COMMA           reduce using rule 57 (exp -> ID LRB explist RRB .)
    RRB             reduce using rule 57 (exp -> ID LRB explist RRB .)


state 133

    (73) explist -> explist COMMA . exp
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 139
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 134

    (34) lvalue -> ID LSB exp RSB .

    ASSIGN          reduce using rule 34 (lvalue -> ID LSB exp RSB .)
    RSB             reduce using rule 34 (lvalue -> ID LSB exp RSB .)
    SUM             reduce using rule 34 (lvalue -> ID LSB exp RSB .)
    SUB             reduce using rule 34 (lvalue -> ID LSB exp RSB .)
    MUL             reduce using rule 34 (lvalue -> ID LSB exp RSB .)
    DIV             reduce using rule 34 (lvalue -> ID LSB exp RSB .)
    MOD             reduce using rule 34 (lvalue -> ID LSB exp RSB .)
    OR              reduce using rule 34 (lvalue -> ID LSB exp RSB .)
    AND             reduce using rule 34 (lvalue -> ID LSB exp RSB .)
    GT              reduce using rule 34 (lvalue -> ID LSB exp RSB .)
    LT              reduce using rule 34 (lvalue -> ID LSB exp RSB .)
    NE              reduce using rule 34 (lvalue -> ID LSB exp RSB .)
    EQ              reduce using rule 34 (lvalue -> ID LSB exp RSB .)
    LE              reduce using rule 34 (lvalue -> ID LSB exp RSB .)
    GE              reduce using rule 34 (lvalue -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 34 (lvalue -> ID LSB exp RSB .)
    COMMA           reduce using rule 34 (lvalue -> ID LSB exp RSB .)
    RRB             reduce using rule 34 (lvalue -> ID LSB exp RSB .)


state 135

    (38) stmt -> WHILE LRB exp RRB . stmt
    (35) stmt -> . RETURN exp SEMICOLON
    (36) stmt -> . exp SEMICOLON
    (37) stmt -> . block
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (43) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (27) block -> . LCB varlist stmtlist RCB
    (28) block -> . LCB varlist RCB
    (29) block -> . LCB stmtlist RCB
    (30) block -> . LCB RCB
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    RETURN          shift and go to state 58
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    LCB             shift and go to state 29
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 59
    stmt                           shift and go to state 140
    block                          shift and go to state 60
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 136

    (39) stmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB stmt
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 141
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 137

    (40) stmt -> IF LRB exp RRB . stmt elseiflist
    (41) stmt -> IF LRB exp RRB . stmt
    (42) stmt -> IF LRB exp RRB . stmt elseiflist ELSE stmt
    (43) stmt -> IF LRB exp RRB . stmt ELSE stmt
    (35) stmt -> . RETURN exp SEMICOLON
    (36) stmt -> . exp SEMICOLON
    (37) stmt -> . block
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (43) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (27) block -> . LCB varlist stmtlist RCB
    (28) block -> . LCB varlist RCB
    (29) block -> . LCB stmtlist RCB
    (30) block -> . LCB RCB
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    RETURN          shift and go to state 58
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    LCB             shift and go to state 29
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 59
    stmt                           shift and go to state 142
    block                          shift and go to state 60
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 138

    (44) stmt -> PRINT LRB ID RRB . SEMICOLON

    SEMICOLON       shift and go to state 143


state 139

    (73) explist -> explist COMMA exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RRB             reduce using rule 73 (explist -> explist COMMA exp .)
    COMMA           reduce using rule 73 (explist -> explist COMMA exp .)
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    OR              shift and go to state 77
    AND             shift and go to state 78
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84


state 140

    (38) stmt -> WHILE LRB exp RRB stmt .

    RCB             reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    RETURN          reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    WHILE           reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    FOR             reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    IF              reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    PRINT           reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    ID              reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    LRB             reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    SUB             reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    NOT             reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    LCB             reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    TRUE            reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    FALSE           reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    ELSE            reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    ELIF            reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)


state 141

    (39) stmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB stmt
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    SEMICOLON       shift and go to state 144
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    OR              shift and go to state 77
    AND             shift and go to state 78
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84


state 142

    (40) stmt -> IF LRB exp RRB stmt . elseiflist
    (41) stmt -> IF LRB exp RRB stmt .
    (42) stmt -> IF LRB exp RRB stmt . elseiflist ELSE stmt
    (43) stmt -> IF LRB exp RRB stmt . ELSE stmt
    (45) elseiflist -> . ELIF LRB exp RRB stmt
    (46) elseiflist -> . elseiflist ELIF LRB exp RRB stmt

    RCB             reduce using rule 41 (stmt -> IF LRB exp RRB stmt .)
    RETURN          reduce using rule 41 (stmt -> IF LRB exp RRB stmt .)
    WHILE           reduce using rule 41 (stmt -> IF LRB exp RRB stmt .)
    FOR             reduce using rule 41 (stmt -> IF LRB exp RRB stmt .)
    IF              reduce using rule 41 (stmt -> IF LRB exp RRB stmt .)
    PRINT           reduce using rule 41 (stmt -> IF LRB exp RRB stmt .)
    ID              reduce using rule 41 (stmt -> IF LRB exp RRB stmt .)
    LRB             reduce using rule 41 (stmt -> IF LRB exp RRB stmt .)
    SUB             reduce using rule 41 (stmt -> IF LRB exp RRB stmt .)
    NOT             reduce using rule 41 (stmt -> IF LRB exp RRB stmt .)
    LCB             reduce using rule 41 (stmt -> IF LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 41 (stmt -> IF LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 41 (stmt -> IF LRB exp RRB stmt .)
    TRUE            reduce using rule 41 (stmt -> IF LRB exp RRB stmt .)
    FALSE           reduce using rule 41 (stmt -> IF LRB exp RRB stmt .)
    ELSE            shift and go to state 146
    ELIF            shift and go to state 147

  ! ELSE            [ reduce using rule 41 (stmt -> IF LRB exp RRB stmt .) ]
  ! ELIF            [ reduce using rule 41 (stmt -> IF LRB exp RRB stmt .) ]

    elseiflist                     shift and go to state 145

state 143

    (44) stmt -> PRINT LRB ID RRB SEMICOLON .

    RCB             reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    RETURN          reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    WHILE           reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FOR             reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    IF              reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    PRINT           reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ID              reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LRB             reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    SUB             reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    NOT             reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LCB             reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FLOATNUMBER     reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    TRUE            reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FALSE           reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELSE            reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELIF            reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)


state 144

    (39) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB stmt
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 148
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 145

    (40) stmt -> IF LRB exp RRB stmt elseiflist .
    (42) stmt -> IF LRB exp RRB stmt elseiflist . ELSE stmt
    (46) elseiflist -> elseiflist . ELIF LRB exp RRB stmt

    RCB             reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    RETURN          reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHILE           reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FOR             reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    IF              reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    PRINT           reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ID              reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LRB             reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    SUB             reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    NOT             reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LCB             reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    INTEGERNUMBER   reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FLOATNUMBER     reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    TRUE            reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FALSE           reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ELSE            shift and go to state 149
    ELIF            shift and go to state 150

  ! ELSE            [ reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .) ]
  ! ELIF            [ reduce using rule 40 (stmt -> IF LRB exp RRB stmt elseiflist .) ]


state 146

    (43) stmt -> IF LRB exp RRB stmt ELSE . stmt
    (35) stmt -> . RETURN exp SEMICOLON
    (36) stmt -> . exp SEMICOLON
    (37) stmt -> . block
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (43) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (27) block -> . LCB varlist stmtlist RCB
    (28) block -> . LCB varlist RCB
    (29) block -> . LCB stmtlist RCB
    (30) block -> . LCB RCB
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    RETURN          shift and go to state 58
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    LCB             shift and go to state 29
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 59
    stmt                           shift and go to state 151
    block                          shift and go to state 60
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 147

    (45) elseiflist -> ELIF . LRB exp RRB stmt

    LRB             shift and go to state 152


state 148

    (39) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB stmt
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RRB             shift and go to state 153
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    OR              shift and go to state 77
    AND             shift and go to state 78
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84


state 149

    (42) stmt -> IF LRB exp RRB stmt elseiflist ELSE . stmt
    (35) stmt -> . RETURN exp SEMICOLON
    (36) stmt -> . exp SEMICOLON
    (37) stmt -> . block
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (43) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (27) block -> . LCB varlist stmtlist RCB
    (28) block -> . LCB varlist RCB
    (29) block -> . LCB stmtlist RCB
    (30) block -> . LCB RCB
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    RETURN          shift and go to state 58
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    LCB             shift and go to state 29
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 59
    stmt                           shift and go to state 154
    block                          shift and go to state 60
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 150

    (46) elseiflist -> elseiflist ELIF . LRB exp RRB stmt

    LRB             shift and go to state 155


state 151

    (43) stmt -> IF LRB exp RRB stmt ELSE stmt .

    RCB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    RETURN          reduce using rule 43 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    WHILE           reduce using rule 43 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    FOR             reduce using rule 43 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    IF              reduce using rule 43 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    PRINT           reduce using rule 43 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    ID              reduce using rule 43 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    LRB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    SUB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    NOT             reduce using rule 43 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    LCB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    INTEGERNUMBER   reduce using rule 43 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    FLOATNUMBER     reduce using rule 43 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    TRUE            reduce using rule 43 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    FALSE           reduce using rule 43 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    ELSE            reduce using rule 43 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    ELIF            reduce using rule 43 (stmt -> IF LRB exp RRB stmt ELSE stmt .)


state 152

    (45) elseiflist -> ELIF LRB . exp RRB stmt
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 156
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 153

    (39) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . stmt
    (35) stmt -> . RETURN exp SEMICOLON
    (36) stmt -> . exp SEMICOLON
    (37) stmt -> . block
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (43) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (27) block -> . LCB varlist stmtlist RCB
    (28) block -> . LCB varlist RCB
    (29) block -> . LCB stmtlist RCB
    (30) block -> . LCB RCB
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    RETURN          shift and go to state 58
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    LCB             shift and go to state 29
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 59
    stmt                           shift and go to state 157
    block                          shift and go to state 60
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 154

    (42) stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .

    RCB             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    RETURN          reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHILE           reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FOR             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    IF              reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    PRINT           reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ID              reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LRB             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    SUB             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    NOT             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LCB             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    INTEGERNUMBER   reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FLOATNUMBER     reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    TRUE            reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FALSE           reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSE            reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELIF            reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)


state 155

    (46) elseiflist -> elseiflist ELIF LRB . exp RRB stmt
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 158
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 156

    (45) elseiflist -> ELIF LRB exp . RRB stmt
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RRB             shift and go to state 159
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    OR              shift and go to state 77
    AND             shift and go to state 78
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84


state 157

    (39) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .

    RCB             reduce using rule 39 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    RETURN          reduce using rule 39 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHILE           reduce using rule 39 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FOR             reduce using rule 39 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    IF              reduce using rule 39 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    PRINT           reduce using rule 39 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ID              reduce using rule 39 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LRB             reduce using rule 39 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    SUB             reduce using rule 39 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    NOT             reduce using rule 39 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LCB             reduce using rule 39 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 39 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FLOATNUMBER     reduce using rule 39 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    TRUE            reduce using rule 39 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FALSE           reduce using rule 39 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSE            reduce using rule 39 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELIF            reduce using rule 39 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)


state 158

    (46) elseiflist -> elseiflist ELIF LRB exp . RRB stmt
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . AND exp
    (66) exp -> exp . GT exp
    (67) exp -> exp . LT exp
    (68) exp -> exp . NE exp
    (69) exp -> exp . EQ exp
    (70) exp -> exp . LE exp
    (71) exp -> exp . GE exp

    RRB             shift and go to state 160
    SUM             shift and go to state 72
    SUB             shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    MOD             shift and go to state 76
    OR              shift and go to state 77
    AND             shift and go to state 78
    GT              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84


state 159

    (45) elseiflist -> ELIF LRB exp RRB . stmt
    (35) stmt -> . RETURN exp SEMICOLON
    (36) stmt -> . exp SEMICOLON
    (37) stmt -> . block
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (43) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (27) block -> . LCB varlist stmtlist RCB
    (28) block -> . LCB varlist RCB
    (29) block -> . LCB stmtlist RCB
    (30) block -> . LCB RCB
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    RETURN          shift and go to state 58
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    LCB             shift and go to state 29
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 59
    stmt                           shift and go to state 161
    block                          shift and go to state 60
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 160

    (46) elseiflist -> elseiflist ELIF LRB exp RRB . stmt
    (35) stmt -> . RETURN exp SEMICOLON
    (36) stmt -> . exp SEMICOLON
    (37) stmt -> . block
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (40) stmt -> . IF LRB exp RRB stmt elseiflist
    (41) stmt -> . IF LRB exp RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (43) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (47) exp -> . lvalue ASSIGN exp
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp AND exp
    (55) exp -> . const
    (56) exp -> . lvalue
    (57) exp -> . ID LRB explist RRB
    (58) exp -> . LRB exp RRB
    (59) exp -> . ID LRB RRB
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (66) exp -> . exp GT exp
    (67) exp -> . exp LT exp
    (68) exp -> . exp NE exp
    (69) exp -> . exp EQ exp
    (70) exp -> . exp LE exp
    (71) exp -> . exp GE exp
    (27) block -> . LCB varlist stmtlist RCB
    (28) block -> . LCB varlist RCB
    (29) block -> . LCB stmtlist RCB
    (30) block -> . LCB RCB
    (33) lvalue -> . ID
    (34) lvalue -> . ID LSB exp RSB
    (62) const -> . INTEGERNUMBER
    (63) const -> . FLOATNUMBER
    (64) const -> . TRUE
    (65) const -> . FALSE

    RETURN          shift and go to state 58
    WHILE           shift and go to state 61
    FOR             shift and go to state 62
    IF              shift and go to state 63
    PRINT           shift and go to state 64
    ID              shift and go to state 37
    LRB             shift and go to state 42
    SUB             shift and go to state 40
    NOT             shift and go to state 43
    LCB             shift and go to state 29
    INTEGERNUMBER   shift and go to state 44
    FLOATNUMBER     shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    exp                            shift and go to state 59
    stmt                           shift and go to state 162
    block                          shift and go to state 60
    lvalue                         shift and go to state 39
    const                          shift and go to state 41

state 161

    (45) elseiflist -> ELIF LRB exp RRB stmt .

    RCB             reduce using rule 45 (elseiflist -> ELIF LRB exp RRB stmt .)
    RETURN          reduce using rule 45 (elseiflist -> ELIF LRB exp RRB stmt .)
    WHILE           reduce using rule 45 (elseiflist -> ELIF LRB exp RRB stmt .)
    FOR             reduce using rule 45 (elseiflist -> ELIF LRB exp RRB stmt .)
    IF              reduce using rule 45 (elseiflist -> ELIF LRB exp RRB stmt .)
    PRINT           reduce using rule 45 (elseiflist -> ELIF LRB exp RRB stmt .)
    ID              reduce using rule 45 (elseiflist -> ELIF LRB exp RRB stmt .)
    LRB             reduce using rule 45 (elseiflist -> ELIF LRB exp RRB stmt .)
    SUB             reduce using rule 45 (elseiflist -> ELIF LRB exp RRB stmt .)
    NOT             reduce using rule 45 (elseiflist -> ELIF LRB exp RRB stmt .)
    LCB             reduce using rule 45 (elseiflist -> ELIF LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 45 (elseiflist -> ELIF LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 45 (elseiflist -> ELIF LRB exp RRB stmt .)
    TRUE            reduce using rule 45 (elseiflist -> ELIF LRB exp RRB stmt .)
    FALSE           reduce using rule 45 (elseiflist -> ELIF LRB exp RRB stmt .)
    ELSE            reduce using rule 45 (elseiflist -> ELIF LRB exp RRB stmt .)
    ELIF            reduce using rule 45 (elseiflist -> ELIF LRB exp RRB stmt .)


state 162

    (46) elseiflist -> elseiflist ELIF LRB exp RRB stmt .

    RCB             reduce using rule 46 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    RETURN          reduce using rule 46 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    WHILE           reduce using rule 46 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    FOR             reduce using rule 46 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    IF              reduce using rule 46 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    PRINT           reduce using rule 46 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    ID              reduce using rule 46 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    LRB             reduce using rule 46 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    SUB             reduce using rule 46 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    NOT             reduce using rule 46 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    LCB             reduce using rule 46 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 46 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 46 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    TRUE            reduce using rule 46 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    FALSE           reduce using rule 46 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    ELSE            reduce using rule 46 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)
    ELIF            reduce using rule 46 (elseiflist -> elseiflist ELIF LRB exp RRB stmt .)

